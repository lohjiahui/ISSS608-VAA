---
title: "Take Home Exercise 1"
author: "Loh Jiahui"
date: "10 May 2023"
date-modified: "`r Sys.Date()`"
execute: 
  warning: false
---

# City of Engagement

## 1 Setting the Scene

City of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things.

## 2 The Task

In this take-home exercise, we will apply the concepts and methods learned in Lesson 1-4 to reveal the demographic and financial characteristics of the city of Engagement.

The goal is to build effective solutions to help city managers and planners to explore the complex data, to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received.

## 3 The Data

For the purpose of this study, two data sets will be analysed. They are:

-   **Participants.csv**: Contains information about the residents of City of Engagement that have agreed to participate in this study.
-   **FinancialJournal.csv**: Contains information about financial transactions of residents in the city.

## 4 Getting Started: Launching R Packages and Importing Data

First, the necessary packages are installed and loaded onto RStudio.

```{r}
pacman::p_load(ggplot2, tidyverse, ggrepel, patchwork, 
               ggthemes,hrbrthemes,ggiraph, plotly, 
               patchwork, DT, readxl, gifski, gapminder,
               gganimate, crosstalk, ggstatsplot, dplyr, lubridate, ggnewscale, broom, knitr, ggridges, viridis, ggdist, ggridges, colorspace)
```

The *Participants.csv* and *FinancialJournal.csv* data is then imported from csv using `readr::read_csv()` and saved under *"Participants"* and *"Finance"*, respectively.

```{r}
participants <- read_csv("data/Participants.csv", show_col_types = FALSE)
finance <- read_csv("data/FinancialJournal.csv", show_col_types = FALSE)
```

## 5 Data Wrangling and Preparation

Before jumping into visualising the data. We first review the data to understand its data structure and clean the data, where necessary, in preparation for visualisation. Looking at the both datasets, a few problems were observed.

### 5.1 *Participants* Dataset

As newer versions of readr don't report the full column specification when data files are loaded. We will use the `spec()` function to better understand the full column specification:

-   Results from running the `spec()` function highlighted that multiple columns were not set to the most appropriate data type; `dplyr::mutate` will be used to correct this.
    -   **participantId** is in `<dbl>` format. It should be reformatted to \<factor\>.
    -   **interestGroup** is in `<chr>` format. It should be reformatted to \<factor\>.
    -   **educationLevel** is in `<chr>` format. It should be reformatted to factor, and ordered from low to high.

```{r}
#| code-fold: true
#| output: false

spec(participants)

participants <- participants %>% mutate_at(c('participantId', 'interestGroup', 'educationLevel'), as.factor)

participants$educationLevel <- ordered(participants$educationLevel, levels = c("Low", "HighSchoolOrCollege", "Bachelors", "Graduate"))
```

-   In order to have the flexibility to analyse the age variable in bands, we will also re-code the age variable into 10 year bands using the `cut()` function. The new variable is saved under *age_band*.

```{r}
#| code-fold: true
# Recode ages into 10-year age bands
# Define breaks and labels
breaks <- seq(10, 70, by = 10)
labels <- c("10-19", "20-29", "30-39", "40-49", "50-59", "60+")

# Recode age variable
participants$age_band <- cut(participants$age, breaks = breaks, labels = labels)

```

### 5.2 *FinancialJournal* dataset

Similar to the *Participants* dataset, multiple issues were observed in the *FinancialJournal* dataset as well. They were:

-   **participantId** is in `<dbl>` format. It should be reformatted to `<factor>`.
-   **category** is in `<chr>` format. It should be reformatted to `<factor>`.

```{r}
#| code-fold: true
#| output: false

spec(finance)
finance <-finance %>% mutate_at(c('participantId', 'category'), as.factor)
```

-   Currently, the variable *timestamp* provides very micro level breakdown of spending pattern; down to the minute. This may not be useful when trying to understanding broad consumption patterns. As such, using `lubridate::as.Date` the *timestamp* variable was reformatted to *"%Y-%m-%d"* and a new variable, *MonthYear* was created to extract only the year and month data from *timestamp*.

```{r}
#| code-fold: true
finance$timestamp <- as.Date(finance$timestamp, format = "%Y-%m-%d")

#Extracting month year
finance$MonthYear <- format(as.Date(finance$timestamp), "%Y-%m")

```

-   1,113 duplicated rows were also observed in the *Finance* dataset. Using `distinct()` these rows should be removed from subsequent analyses. The truncated dataset will be saved under *fin_new.*

```{r}
#| code-fold: true
fin_new <- finance %>% distinct()
```

-   Under the amount variable in *FinancialJournal*, inflow and outflow of money transacted is recorded using positive and negative numbers, respectively. This may cause confusion when visualising the data. We will process the data and use the absolute values using `abs()`.

```{r}
#| code-fold: true
fin_new$amount <- abs(fin_new$amount)
```

-   To ensure completeness of data, we also look at the data at the participant level. From the histogram below, it is clear that a cluster of 131 participants had very few, close to zero transactions. This may be due to participants dropping out from the study, or moving away from the town. Since little to no financial data were collected from these participants, these participants will be removed from subsequent analyses using `filter()`.

::: panel-tabset
### Plot

```{r}
#| echo: false
fin_grouped <- fin_new %>%
  group_by(participantId) %>%
  dplyr::summarize(transaction_count = n()) %>%
  arrange(transaction_count)

p <- ggplot(data=fin_grouped, 
       aes(x = transaction_count)) +
  geom_histogram(bins = 39,
                color="black",      
                fill="steelblue") +
  ggtitle("Distribution of Transactions among Participants") +
  xlab("Transaction Count") + 
  ylab("Number of Participants") +
  theme_classic()

p <- ggplotly(p, tooltip=c("y"))

# display the plot
p
```

### Code

```{r}
#| eval: true
#| output: false

fin_grouped <- fin_new %>%
  group_by(participantId) %>%
  dplyr::summarize(transaction_count = n()) %>%
  arrange(transaction_count)

p <- ggplot(data=fin_grouped, 
       aes(x = transaction_count)) +
  geom_histogram(bins = 39,
                color="black",      
                fill="steelblue") +
  ggtitle("Distribution of Transactions among Participants") +
  xlab("Transaction Count") + 
  ylab("Number of Participants") +
  theme_classic()

p <- ggplotly(p, tooltip=c("y"))

# display the plot
p
```
:::

```{r}
#| code-fold: true
# Find participant IDs in fin_grouped with transaction count < 500
participants_to_remove <- fin_grouped %>%
  filter(transaction_count < 500) %>%
  pull(participantId)

# Filter out rows in fin_new for those participants
fin_new <- fin_new %>%
  filter(!participantId %in% participants_to_remove)
```

-   Currently, the data is in a long format, with each row representing 1 transaction. We will transform the data using `pivot_wider()` to a wide format instead.

```{r}
#| code-fold: true
fin_final <- fin_new %>%
  group_by(participantId, category, MonthYear) %>%
  summarise(Total = sum(amount))

fin_final <- pivot_wider(
  fin_final,names_from = category,values_from =Total)

fin_wide <- fin_final %>%
  pivot_wider(names_from = MonthYear, values_from = c(Education, Food, Recreation, Shelter, Wage, RentAdjustment))

#convert all NA values to 0 
fin_wide[is.na(fin_wide)] <- 0
```

-   Before merging, we will create the following new variables using `mutate()`:
    -   Total Expenditure across categories, across months e.g., TotExp_Mar
    -   Total Earnings, across months e.g., TotEarn_Mar
    -   Total Savings, across months calculated using TotEarn - TotExp for each month

```{r}
#| code-fold: true

#Total expenditure across months
fin_wide <- fin_wide %>%
  mutate(
    TotExp_Mar = `Education_2022-03` + `Food_2022-03` + `Recreation_2022-03` + `Shelter_2022-03`,
    TotExp_Apr = `Education_2022-04` + `Food_2022-04` + `Recreation_2022-04` + `Shelter_2022-04`,
    TotExp_May = `Education_2022-05` + `Food_2022-05` + `Recreation_2022-05` + `Shelter_2022-05`,
    TotExp_Jun = `Education_2022-06` + `Food_2022-06` + `Recreation_2022-06` + `Shelter_2022-06`,
    TotExp_Jul = `Education_2022-07` + `Food_2022-07` + `Recreation_2022-07` + `Shelter_2022-07`,
    TotExp_Aug = `Education_2022-08` + `Food_2022-08` + `Recreation_2022-08` + `Shelter_2022-08`,
    TotExp_Sep = `Education_2022-09` + `Food_2022-09` + `Recreation_2022-09` + `Shelter_2022-09`,
    TotExp_Oct = `Education_2022-10` + `Food_2022-10` + `Recreation_2022-10` + `Shelter_2022-10`,
    TotExp_Nov = `Education_2022-11` + `Food_2022-11` + `Recreation_2022-11` + `Shelter_2022-11`,
    TotExp_Dec = `Education_2022-12` + `Food_2022-12` + `Recreation_2022-12` + `Shelter_2022-12`,
    TotExp_Jan = `Education_2023-01` + `Food_2023-01` + `Recreation_2023-01` + `Shelter_2023-01`,
    TotExp_Feb = `Education_2023-02` + `Food_2023-02` + `Recreation_2023-02` + `Shelter_2023-02`
)

#Total Earnings across months
fin_wide <- fin_wide %>%
  mutate(
    TotEarn_Mar = `Wage_2022-03` + ifelse(is.na(`RentAdjustment_2022-03`), 0, `RentAdjustment_2022-03`),
    TotEarn_Apr = `Wage_2022-04` + ifelse(is.na(`RentAdjustment_2022-04`), 0, `RentAdjustment_2022-04`),
    TotEarn_May = `Wage_2022-05` + ifelse(is.na(`RentAdjustment_2022-05`), 0, `RentAdjustment_2022-05`),
    TotEarn_Jun = `Wage_2022-06` + ifelse(is.na(`RentAdjustment_2022-06`), 0, `RentAdjustment_2022-06`),
    TotEarn_Jul = `Wage_2022-07` + ifelse(is.na(`RentAdjustment_2022-07`), 0, `RentAdjustment_2022-07`),
    TotEarn_Aug = `Wage_2022-08` + ifelse(is.na(`RentAdjustment_2022-08`), 0, `RentAdjustment_2022-08`),
    TotEarn_Sep = `Wage_2022-09` + ifelse(is.na(`RentAdjustment_2022-09`), 0, `RentAdjustment_2022-09`),
    TotEarn_Oct = `Wage_2022-10` + ifelse(is.na(`RentAdjustment_2022-10`), 0, `RentAdjustment_2022-10`),
    TotEarn_Nov = `Wage_2022-11` + ifelse(is.na(`RentAdjustment_2022-11`), 0, `RentAdjustment_2022-11`),
    TotEarn_Dec = `Wage_2022-12` + ifelse(is.na(`RentAdjustment_2022-12`), 0, `RentAdjustment_2022-12`),
    TotEarn_Jan = `Wage_2023-01` + ifelse(is.na(`RentAdjustment_2023-01`), 0, `RentAdjustment_2023-01`),
    TotEarn_Feb = `Wage_2023-02` + ifelse(is.na(`RentAdjustment_2023-02`), 0, `RentAdjustment_2023-02`))

#Total Savings across months
fin_wide <- fin_wide %>%
  mutate(
    TotSav_Mar = TotEarn_Mar - TotExp_Mar,
    TotSav_Apr = TotEarn_Apr - TotExp_Apr,
    TotSav_May = TotEarn_May - TotExp_May,
    TotSav_Jun = TotEarn_Jun - TotExp_Jun,
    TotSav_Jul = TotEarn_Jul - TotExp_Jul,
    TotSav_Aug = TotEarn_Aug - TotExp_Aug,
    TotSav_Sep = TotEarn_Sep - TotExp_Sep,
    TotSav_Oct = TotEarn_Oct - TotExp_Oct,
    TotSav_Nov = TotEarn_Nov - TotExp_Nov,
    TotSav_Dec = TotEarn_Dec - TotExp_Dec,
    TotSav_Jan = TotEarn_Jan - TotExp_Jan,
    TotSav_Feb = TotEarn_Feb - TotExp_Feb
  )

```

### 5.3 Combining both datasets

Lastly, using `merge()`, both datasets (i.e., *participants* and *fin_wide*) will be combined to allow comparisons of financial data between different demographic groups. The new dataset will be saved under *final_data*.

```{r}
#| code-fold: true
# merge the datasets
merged <- merge(fin_wide, participants, by = "participantId", all.x = TRUE)

# subset the merged dataset to keep only the rows with participantId in fin_wide
final_data <- subset(merged, participantId %in% fin_wide$participantId)

```

## 6 Citizen Demographic

To have a quick overview of the demographic profile of residents, simple pie charts are used. Specifically, these charts are good when trying to show whole to part relationships, and are useful when there are not too many categories within variables.

### 6.1 Family Size

Residents of the city tended to have small families; no more than 3 members per household. Looking at the two charts side-by-side, we also see that the sample proportion of families with 3 members is the same at the proportion of families with children.

::: panel-tabset
### Plot

```{r, fig.align='center'}
#| echo: false

# Calculate the proportion of respondents in each HHsize band category
final_data$householdSize <- as.factor(final_data$householdSize)
household_props <- final_data %>%
  count(householdSize) %>%
  mutate(prop = n / sum(n))

# Create a pie chart with the household size
p3 <- ggplot(household_props, aes(x = "", y = prop, fill = householdSize)) +
  geom_bar(stat = "identity", width = 1, color = "white") +
  coord_polar(theta = "y", start = 0, direction = -1) +
  scale_fill_manual(values = c("pink1", "pink3", "pink4")) +
  theme_void() +
  theme(legend.position = "right",
        plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
        legend.title = element_text(size = 10, face = "bold"),
        legend.text = element_text(size = 8)) +
  labs(fill = "Education Level") +
  geom_text(aes(label = paste0(round(prop*100), "%")), position = position_stack(vjust = 0.5), size = 3) +
  ggtitle("Residents by Household Size(%)")

# Calculate the proportion of respondents havekids category
final_data$haveKids <- as.factor(final_data$haveKids)
kids_props <- final_data %>%
  count(haveKids) %>%
  mutate(prop = n / sum(n))

# Create a pie chart using havekids variable
p4 <- ggplot(kids_props, aes(x = "", y = prop, fill = haveKids)) +
  geom_bar(stat = "identity", width = 1, color = "white") +
  coord_polar(theta = "y", start = 0, direction = -1) +
  scale_fill_manual(values = c("orange", "skyblue")) +
  theme_void() +
  theme(legend.position = "right",
        plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
        legend.title = element_text(size = 10, face = "bold"),
        legend.text = element_text(size = 8)) +
  labs(fill = "Have Kids") +
  geom_text(aes(label = paste0(round(prop*100), "%")), position = position_stack(vjust = 0.5), size = 3) +
  ggtitle("Residents by whether they have kids(%)")

(p3 + p4)
```

### Code

```{r}
#| eval: true
#| output: false

# Calculate the proportion of respondents in each HHsize band category
final_data$householdSize <- as.factor(final_data$householdSize)
household_props <- final_data %>%
  count(householdSize) %>%
  mutate(prop = n / sum(n))

# Create a pie chart with the household size
p3 <- ggplot(household_props, aes(x = "", y = prop, fill = householdSize)) +
  geom_bar(stat = "identity", width = 1, color = "white") +
  coord_polar(theta = "y", start = 0, direction = -1) +
  scale_fill_manual(values = c("pink1", "pink3", "pink4")) +
  theme_void() +
  theme(legend.position = "right",
        plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
        legend.title = element_text(size = 10, face = "bold"),
        legend.text = element_text(size = 8)) +
  labs(fill = "Education Level") +
  geom_text(aes(label = paste0(round(prop*100), "%")), position = position_stack(vjust = 0.5), size = 3) +
  ggtitle("Residents by Household Size(%)")

# Calculate the proportion of respondents havekids category
final_data$haveKids <- as.factor(final_data$haveKids)
kids_props <- final_data %>%
  count(haveKids) %>%
  mutate(prop = n / sum(n))

# Create a pie chart using havekids variable
p4 <- ggplot(kids_props, aes(x = "", y = prop, fill = haveKids)) +
  geom_bar(stat = "identity", width = 1, color = "white") +
  coord_polar(theta = "y", start = 0, direction = -1) +
  scale_fill_manual(values = c("orange", "skyblue")) +
  theme_void() +
  theme(legend.position = "right",
        plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
        legend.title = element_text(size = 10, face = "bold"),
        legend.text = element_text(size = 8)) +
  labs(fill = "Have Kids") +
  geom_text(aes(label = paste0(round(prop*100), "%")), position = position_stack(vjust = 0.5), size = 3) +
  ggtitle("Residents by whether they have kids(%)")

(p3 + p4)
```
:::

### 6.2 Age and Education

The age of residents living in the city were relatively evenly distributed, with close to one-third of the population (30%) made up by younger respondents below the ages of 30. Close to half were high school or college educated, while a similar proportion had a bachelor's degree or higher.

::: panel-tabset
### Plot

```{r, fig.align='center'}
#| echo: false

# Calculate the proportion of respondents in each age band category
age_band_props <- final_data %>%
  count(age_band) %>%
  mutate(prop = n / sum(n))

# Create a pie chart with the age band proportions
p1 <- ggplot(age_band_props, aes(x = "", y = prop, fill = age_band)) +
  geom_bar(stat = "identity", width = 1, color = "white") +
  coord_polar(theta = "y", start = 0, direction = -1) +
  scale_fill_manual(values = c("lightcyan2", "skyblue1", "skyblue2", "skyblue3", "skyblue4", "darkslategrey")) +
  theme_void() +
  theme(legend.position = "right",
        plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
        legend.title = element_text(size = 10, face = "bold"),
        legend.text = element_text(size = 8)) +
  labs(fill = "Age Band") +
  geom_text(aes(label = paste0(round(prop*100), "%")), position = position_stack(vjust = 0.5), size = 3) +
  ggtitle("Residents by Age Band (%)")

# Calculate the proportion of respondents in each education band category
education_props <- final_data %>%
  count(educationLevel) %>%
  mutate(prop = n / sum(n))

# Create a pie chart with the education proportions
p2 <- ggplot(education_props, aes(x = "", y = prop, fill = educationLevel)) +
  geom_bar(stat = "identity", width = 1, color = "white") +
  coord_polar(theta = "y", start = 0, direction = -1) +
  scale_fill_manual(values = c("honeydew", "darkseagreen1", "darkseagreen3", "darkseagreen4")) +
  theme_void() +
  theme(legend.position = "right",
        plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
        legend.title = element_text(size = 10, face = "bold"),
        legend.text = element_text(size = 8)) +
  labs(fill = "Education Level") +
  geom_text(aes(label = paste0(round(prop*100), "%")), position = position_stack(vjust = 0.5), size = 3) +
  ggtitle("Residents by Education Level(%)")


(p1 + p2)
```

### Code

```{r}
#| eval: true
#| output: false

# Calculate the proportion of respondents in each age band category
age_band_props <- final_data %>%
  count(age_band) %>%
  mutate(prop = n / sum(n))

# Create a pie chart with the age band proportions
p1 <- ggplot(age_band_props, aes(x = "", y = prop, fill = age_band)) +
  geom_bar(stat = "identity", width = 1, color = "white") +
  coord_polar(theta = "y", start = 0, direction = -1) +
  scale_fill_manual(values = c("skyblue1", "skyblue2", "skyblue3", "skyblue4", "darkslategrey", "grey25")) +
  theme_void() +
  theme(legend.position = "right",
        plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
        legend.title = element_text(size = 10, face = "bold"),
        legend.text = element_text(size = 8)) +
  labs(fill = "Age Band") +
  geom_text(aes(label = paste0(round(prop*100), "%")), position = position_stack(vjust = 0.5), size = 3) +
  ggtitle("Residents by Age Band (%)")

# Calculate the proportion of respondents in each education band category
education_props <- final_data %>%
  count(educationLevel) %>%
  mutate(prop = n / sum(n))

# Create a pie chart with the age band proportions
p2 <- ggplot(education_props, aes(x = "", y = prop, fill = educationLevel)) +
  geom_bar(stat = "identity", width = 1, color = "white") +
  coord_polar(theta = "y", start = 0, direction = -1) +
  scale_fill_manual(values = c("darkseagreen1", "darkseagreen3", "darkseagreen4", "darkslategrey")) +
  theme_void() +
  theme(legend.position = "right",
        plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
        legend.title = element_text(size = 10, face = "bold"),
        legend.text = element_text(size = 8)) +
  labs(fill = "Education Level") +
  geom_text(aes(label = paste0(round(prop*100), "%")), position = position_stack(vjust = 0.5), size = 3) +
  ggtitle("Residents by Education Level(%)")

(p1 + p2)
```
:::

As a next step, let's explore whether there is a relationship between age and education. Since the distribution of age departed from normality, we will use the non-parametric Kruskal-Wallis test. Looking at the boxplots, it was observed that there was no statistically significant correlations between the two variables.

::: callout-note
This means that the education levels of younger residents were comparable to older residents. Since education levels are commonly tied to income, this finding may suggest low social mobility among residents in the city. As such, we will explore the relationship between education and wage next.
:::

::: panel-tabset
### Plot

```{r}
#| echo: false

ggbetweenstats(
  data = final_data,
  x = educationLevel, 
  y = age,
  type = "np",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE) +
  theme_classic() +
  theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
       axis.title = element_text(size = 12),
        axis.text = element_text(size = 7),
        legend.position = "none") +
  labs(x = "Education Level", y = "Age") +
  ggtitle("Age by Education Level")

```

### Code

```{r}
#| eval: true
#| output: false

ggbetweenstats(
  data = final_data,
  x = educationLevel, 
  y = age,
  type = "np",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE) +
  theme_classic() +
  theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
       axis.title = element_text(size = 12),
        axis.text = element_text(size = 7),
        legend.position = "none") +
  labs(x = "Education Level", y = "Age") +
  ggtitle("Age by Education Level")

```

### Normality Test

```{r}
#| echo: false

# Calculate Shapiro-Wilk test statistic and p-value
sw_test <- shapiro.test(final_data$age)
sw_stat <- sw_test$statistic
sw_p <- sw_test$p.value

ggplot(final_data,
       aes(sample=age)) +
  stat_qq() +
  stat_qq_line() +
  annotate("text", x = -1.5, y = -2.5, 
           label = paste("Shapiro-Wilk test:", "\n", "statistic =", round(sw_stat, 3), "\n", "p-value =", format(sw_p, scientific = TRUE, digits = 3)), 
           hjust = 0, vjust = 0, size = 3, color = "black")+
  ggtitle("Distribution - Age") +
  theme_classic() +
  theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
       axis.title = element_text(size = 12),
        axis.text = element_text(size = 10)) +
  labs(y = "Age")
```

### Code

```{r}
#| eval: true
#| output: false

# Calculate Shapiro-Wilk test statistic and p-value
sw_test <- shapiro.test(final_data$age)
sw_stat <- sw_test$statistic
sw_p <- sw_test$p.value

ggplot(final_data,
       aes(sample=age)) +
  stat_qq() +
  stat_qq_line() +
  annotate("text", x = -1.5, y = -2.5, 
           label = paste("Shapiro-Wilk test:", "\n", "statistic =", round(sw_stat, 3), "\n", "p-value =", format(sw_p, scientific = TRUE, digits = 3)), 
           hjust = 0, vjust = 0, size = 3, color = "black")+
  ggtitle("Distribution - Age") +
  theme_classic() +
  theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
       axis.title = element_text(size = 12),
        axis.text = element_text(size = 10)) +
  labs(y = "Age")
```
:::

### 6.3 Education and Income

In order to further explore income, a new variable, *mean_wage*, was calculated using `rowMeans()`.

```{r}
#| code-fold: true
# Select the columns that contain wage information
wage_cols <- grepl("^Wage_20", names(final_data))

# Calculate the average wage
final_data$mean_wage <- rowMeans(final_data[, wage_cols], na.rm = TRUE)

```

Before running the confirmatory data analysis, aligned with earlier analysis, a normality assumption test for the distribution of average wage among residents was performed. From the qqplot below, we can see that the distribution of average wage significantly departed from normality. Due to this outcome, we will use a non-parametric test.

Looking at the boxplot, we can see that wage earned by residents were significantly different between education levels. Specifically, residents who received more education, were more likely to earn a higher wage.

::: callout-note
As education was found to be positively correlated with wages, there may be value in looking at how residents, especially younger residents, can be nudged to continue their education. Specifically, the local council can seek to understand any barriers towards further education, and interests among citizens.
:::

::: panel-tabset
### Plot

```{r}
#| echo: false

ggbetweenstats(
  data = final_data,
  x = educationLevel, 
  y = mean_wage,
  type = "np",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE) +
  theme_classic() +
  theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
       axis.title = element_text(size = 12),
        axis.text = element_text(size = 7),
        legend.position = "none") +
  labs(x = "Education Level", y = "Income") +
  ggtitle("Income by Education Level")
```

### Code

```{r}
#| eval: true
#| output: false

ggbetweenstats(
  data = final_data,
  x = educationLevel, 
  y = mean_wage,
  type = "np",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE) +
  theme_classic() +
  theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
       axis.title = element_text(size = 12),
        axis.text = element_text(size = 7),
        legend.position = "none") +
  labs(x = "Education Level", y = "Income") +
  ggtitle("Income by Education Level")
```

### Normality Test

```{r}
#| echo: false

# Select the columns that contain wage information
wage_cols <- grepl("^Wage_20", names(final_data))

# Calculate the average wage
final_data$mean_wage <- rowMeans(final_data[, wage_cols], na.rm = TRUE)

# Calculate Shapiro-Wilk test statistic and p-value
sw_test <- shapiro.test(final_data$mean_wage)
sw_stat <- sw_test$statistic
sw_p <- sw_test$p.value

ggplot(final_data,
       aes(sample=mean_wage)) +
  stat_qq() +
  stat_qq_line() +
  annotate("text", x = -1.5, y = -2.5, 
           label = paste("Shapiro-Wilk test:", "\n", "statistic =", round(sw_stat, 3), "\n", "p-value =", format(sw_p, scientific = TRUE, digits = 3)), 
           hjust = 0.5, vjust = -1.5, size = 3, color = "black")+
  ggtitle("Distribution - Wage") +
  theme_classic() +
  theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
       axis.title = element_text(size = 12),
        axis.text = element_text(size = 10)) +
  labs(y = "Wage")

```

### Code

```{r}
#| eval: true
#| output: false

# Select the columns that contain wage information
wage_cols <- grepl("^Wage_20", names(final_data))

# Calculate the average wage
final_data$mean_wage <- rowMeans(final_data[, wage_cols], na.rm = TRUE)

# Calculate Shapiro-Wilk test statistic and p-value
sw_test <- shapiro.test(final_data$mean_wage)
sw_stat <- sw_test$statistic
sw_p <- sw_test$p.value

ggplot(final_data,
       aes(sample=mean_wage)) +
  stat_qq() +
  stat_qq_line() +
  annotate("text", x = -1.5, y = -2.5, 
           label = paste("Shapiro-Wilk test:", "\n", "statistic =", round(sw_stat, 3), "\n", "p-value =", format(sw_p, scientific = TRUE, digits = 3)), 
           hjust = 0.5, vjust = -1.5, size = 3, color = "black")+
  ggtitle("Distribution - Wage") +
  theme_classic() +
  theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
       axis.title = element_text(size = 12),
        axis.text = element_text(size = 10)) +
  labs(y = "Wage")

```
:::

## 7 Consumption Pattern

### 7.1 Overall Financial Health

In order to chart earnings and expenditure patterns over time. We will transform resident's earnings and expenditure data into long form using `mutate().` A new dataframe named *'Earn_Exp_avg'* with the following variables will be created:

-   **Month:** Date in 'YYYY-MM' format
-   **EducationLevel:** No change from original data
-   **Avg_Earning:** Average monthly earnings i.e., both wage and rentadjustments
-   **Avg_Expenditure:** Average monthly expenditure
-   **Avg_Savings:** Calculated variable deducting monthly expenditure from monthly earnings

```{r}
#| code-fold: true
#Transform Earning Data to long form
Earn_data_long <- final_data %>%
  select(participantId, educationLevel, starts_with("TotEarn")) %>%
  gather(key = "Month", value = "Earning", starts_with("TotEarn"))

Earn_data_long_renamed <- Earn_data_long %>% 
  mutate(Month = case_when(
    Month == "TotEarn_Mar" ~ "2022-03",
    Month == "TotEarn_Apr" ~ "2022-04",
    Month == "TotEarn_May" ~ "2022-05",
    Month == "TotEarn_Jun" ~ "2022-06",
    Month == "TotEarn_Jul" ~ "2022-07",
    Month == "TotEarn_Aug" ~ "2022-08",
    Month == "TotEarn_Sep" ~ "2022-09",
    Month == "TotEarn_Oct" ~ "2022-10",
    Month == "TotEarn_Nov" ~ "2022-11",
    Month == "TotEarn_Dec" ~ "2022-12",
    Month == "TotEarn_Jan" ~ "2023-01",
    Month == "TotEarn_Feb" ~ "2023-02",
    TRUE ~ Month
  )) %>% 
  rename(Month_renamed = Month)

Earn_data_long_renamed$Month <- as.Date(paste0(Earn_data_long_renamed$Month, "-01"), format = "%Y-%m-%d")

Earn_data_long_renamed <- as_tibble(Earn_data_long_renamed)

#Transform Exp Data to long form
Exp_data_long <- final_data %>%
  select(participantId, educationLevel, starts_with("TotExp")) %>%
  mutate(across(starts_with("TotExp"), ~coalesce(., 0))) %>%
  gather(key = "Month", value = "Expenditure", starts_with("TotExp"))

Exp_data_long_renamed <- Exp_data_long %>% 
  mutate(Month = case_when(
    Month == "TotExp_Mar" ~ "2022-03",
    Month == "TotExp_Apr" ~ "2022-04",
    Month == "TotExp_May" ~ "2022-05",
    Month == "TotExp_Jun" ~ "2022-06",
    Month == "TotExp_Jul" ~ "2022-07",
    Month == "TotExp_Aug" ~ "2022-08",
    Month == "TotExp_Sep" ~ "2022-09",
    Month == "TotExp_Oct" ~ "2022-10",
    Month == "TotExp_Nov" ~ "2022-11",
    Month == "TotExp_Dec" ~ "2022-12",
    Month == "TotExp_Jan" ~ "2023-01",
    Month == "TotExp_Feb" ~ "2023-02",
    TRUE ~ Month
  )) %>% 
  rename(Month_renamed = Month)

Exp_data_long_renamed$Month <- as.Date(paste0(Earn_data_long_renamed$Month, "-01"), format = "%Y-%m-%d")

Exp_data_long_renamed <- as_tibble(Exp_data_long_renamed)
#sum(is.na(Exp_data_long_renamed$Expenditure))

# Group and summarize earning data by month
Earn_data_avg <- Earn_data_long_renamed %>% 
  group_by(Month, educationLevel) %>% 
  summarize(avg_earning = mean(Earning))

# Group and summarize expenditure data by month
Exp_data_avg <- Exp_data_long_renamed %>% 
  group_by(Month, educationLevel) %>% 
  summarize(avg_expenditure = mean(Expenditure))

Earn_Exp_avg <- full_join(Earn_data_avg, Exp_data_avg, 
                           by = c("educationLevel", "Month"))

# Create a new column for savings
Earn_Exp_avg$savings <- Earn_Exp_avg$avg_earning - Earn_Exp_avg$avg_expenditure

#Round values to 2dp
Earn_Exp_avg$avg_expenditure <- round(Earn_Exp_avg$avg_expenditure, 2)
Earn_Exp_avg$avg_earning <- round(Earn_Exp_avg$avg_earning, 2)
Earn_Exp_avg$savings <- round(Earn_Exp_avg$savings, 2)

#Rename Columns 
Earn_Exp_avg <- Earn_Exp_avg %>% rename(Education_Level = educationLevel, Avg_Earning = avg_earning, Avg_Expenditure = avg_expenditure, Avg_Savings = savings)
```

From the line charts below, we can see that monthly expenditure among residents tended to be fairly stable across months, regardless of their education levels. Even in the month of March, where earnings tended to spike, expenditure remained fairly low. Notably, instead of spending more, residents with higher wage tended to save more monthly (portion highlighted in yellow).

::: callout-note
This suggests that residents, regardless of income, are generally frugal with their money and spend within their means. A good sign in terms of financial health!
:::

::: panel-tabset
### Plot

```{r}
#| echo: false

# Create a ggplot object with the data
p <-ggplot(data = Earn_Exp_avg, aes(x = Month)) +
  geom_line(aes(y = Avg_Earning, color = "Avg_Earning")) +
  geom_line(aes(y = Avg_Expenditure, color = "Avg_Expenditure")) +
  geom_ribbon(aes(ymin = Avg_Expenditure, ymax = Avg_Earning), fill = "yellow", alpha = 0.3) +
  scale_color_manual(name = NULL, values = c("Avg_Earning" = "steelblue", "Avg_Expenditure" = "orange"), 
                     labels = c("Average Earnings", "Average Expenditure")) +
  labs(title = "Average Earnings and Expenditure per Month",
       x = "Month",
       y = "Amount") +
  theme_classic() +
  facet_wrap(~ Education_Level, ncol = 1, scales = "free_y") +
  ylim(0, 10000) +
  scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
  theme(legend.position = "bottom",
        plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
        axis.title = element_text(size = 10),
        axis.text = element_text(size = 6))

# Convert the ggplot object to an interactive plotly object and modify the hoverinfo argument
p <- ggplotly(p, height = 500, tooltip = c("Avg_Earning", "Avg_Expenditure")) %>%
  layout(hoverlabel = list(bgcolor = "white"))

# Set the legend position to "bottom"
p <- layout(p, legend = list(orientation = "h", x = 0.25, y = -0.1))

# Display the plot
p

```

### Code

```{r}
#| eval: true
#| output: false

# Create a ggplot object with the data
p <-ggplot(data = Earn_Exp_avg, aes(x = Month)) +
  geom_line(aes(y = Avg_Earning, color = "Avg_Earning")) +
  geom_line(aes(y = Avg_Expenditure, color = "Avg_Expenditure")) +
  geom_ribbon(aes(ymin = Avg_Expenditure, ymax = Avg_Earning), fill = "yellow", alpha = 0.3) +
  scale_color_manual(name = NULL, values = c("Avg_Earning" = "steelblue", "Avg_Expenditure" = "orange"), 
                     labels = c("Average Earnings", "Average Expenditure")) +
  labs(title = "Average Earnings and Expenditure per Month",
       x = "Month",
       y = "Amount") +
  theme_classic() +
  facet_wrap(~ Education_Level, ncol = 1, scales = "free_y") +
  ylim(0, 10000) +
  scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
  theme(legend.position = "bottom",
        plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
        axis.title = element_text(size = 10),
        axis.text = element_text(size = 6))

# Convert the ggplot object to an interactive plotly object and modify the hoverinfo argument
p <- ggplotly(p, height = 500, tooltip = c("Avg_Earning", "Avg_Expenditure")) %>%
  layout(hoverlabel = list(bgcolor = "white"))

# Set the legend position to "bottom"
p <- layout(p, legend = list(orientation = "h", x = 0.25, y = -0.1))

# Display the plot
p

```
:::

### 7.2 Expenditure Pattern

To better understand spending patterns, using `rowMeans()`, new variables were calculated to derive the average monthly spending on each category i.e., education, food, recreational, shelter.

```{r}
#| code-fold: true

# Create New variable for total average education expenditure
final_data$Education <- rowMeans(final_data[c("Education_2022-03", "Education_2022-04", "Education_2022-05","Education_2022-06", "Education_2022-07", "Education_2022-08","Education_2022-09", "Education_2022-10", "Education_2022-11","Education_2022-12", "Education_2023-01", "Education_2023-02")])

# Create New variable for total average food expenditure
final_data$Food<- rowMeans(final_data[c("Food_2022-03", "Food_2022-04", "Food_2022-05","Food_2022-06", "Food_2022-07", "Food_2022-08","Food_2022-09", "Food_2022-10", "Food_2022-11","Food_2022-12", "Food_2023-01", "Food_2023-02")])

# Create New variable for total average recreation expenditure
final_data$Recreation<- rowMeans(final_data[c("Recreation_2022-03", "Recreation_2022-04", "Recreation_2022-05","Recreation_2022-06", "Recreation_2022-07", "Recreation_2022-08","Recreation_2022-09", "Recreation_2022-10", "Recreation_2022-11","Recreation_2022-12", "Recreation_2023-01", "Recreation_2023-02")])

# Create New variable for total average shelter expenditure
final_data$Shelter<- rowMeans(final_data[c("Shelter_2022-03", "Shelter_2022-04", "Shelter_2022-05","Shelter_2022-06", "Shelter_2022-07", "Shelter_2022-08","Shelter_2022-09", "Shelter_2022-10", "Shelter_2022-11","Shelter_2022-12", "Shelter_2023-01", "Shelter_2023-02")])

# Round the result to 2 decimal places
final_data$Education <- round(final_data$Education, 2)
final_data$Food <- round(final_data$Food, 2)
final_data$Recreation <- round(final_data$Recreation, 2)
final_data$Shelter <- round(final_data$Shelter, 2)

# Calculate the mean spending for each category
mean_spending <- c(mean(final_data$Education), mean(final_data$Food), 
                   mean(final_data$Recreation), mean(final_data$Shelter))

# Create a data frame with the mean spending for each category
spending_summary <- data.frame(Category = c("Education", "Food", "Recreation", "Shelter"),
                               Mean_Spending = mean_spending)
```

From the bar chart below, we see that a approximately half of total monthly expenditure was spent on shelter. This was followed by recreational activities, then food and lastly education.

::: panel-tabset
### Plot

```{r}
#| echo: false

# Create a bar chart of the mean spending for each category
spending_summary %>%
  mutate(Category = reorder(Category, -Mean_Spending)) %>%
  ggplot(aes(x = Category, y = Mean_Spending)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_text(aes(label = paste0("$", round(Mean_Spending, 2))), vjust = -0.5) +
  ggtitle("Average Monthly Spending by Category") +
  xlab("Category") +
  ylab("Average Monthly Spending") +
  theme_classic() +  
  theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
        axis.title = element_text(size = 10),
        axis.text = element_text(size = 10))


```

### Code

```{r}
#| eval: true
#| output: false

# Create a bar chart of the mean spending for each category
spending_summary %>%
  mutate(Category = reorder(Category, -Mean_Spending)) %>%
  ggplot(aes(x = Category, y = Mean_Spending)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_text(aes(label = paste0("$", round(Mean_Spending, 2))), vjust = -0.5) +
  ggtitle("Average Monthly Spending by Category") +
  xlab("Category") +
  ylab("Average Monthly Spending") +
  theme_classic() +  
  theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
        axis.title = element_text(size = 10),
        axis.text = element_text(size = 10))

```
:::

## 8 Happiness

### 8.1 Financial Health and Happiness

It is reasonable to link financial health to happiness. As such, let's explore the hypothesis that both variables are positively correlated with one another i.e., the wealthier/more savings one has, the happier one is. The scatter plot below however, suggests otherwise.In fact, on the top left corner of the scatter plot, we can see that examples of residents with very high savings indicating low joviality scores.

::: callout-note
Contrary to our hypothesis, monthly savings was found to be negatively correlated with joviality. This may be due to external stressors that come with a higher paying jobs. It may be useful for the local council to reach out to high earners in the city, to better support their well-being.
:::

::: panel-tabset
### Plot

```{r}
#| echo: false

# Create New variable for Savings
final_data$Avg_Savings <- rowMeans(final_data[, c("TotSav_Mar", "TotSav_Apr", "TotSav_May","TotSav_Jun", "TotSav_Jul", "TotSav_Aug","TotSav_Sep", "TotSav_Oct", "TotSav_Nov","TotSav_Dec", "TotSav_Jan", "TotSav_Feb")])

# Round the result to 2 decimal places
final_data$Avg_Savings <- round(final_data$Avg_Savings, 2)

plot_ly(data = final_data, 
        x = ~joviality, 
        y = ~Avg_Savings,
        color = ~educationLevel,
        type = "scatter",
        mode   = 'markers') %>%
  add_trace(
    text = ~paste("Joviality: ", joviality, "<br>",
                  "Avg Savings: $", Avg_Savings),
    hoverinfo = "text",
    showlegend = FALSE
  ) %>%
  layout(
    title = "Correlation between Joviality and Savings by Education",
    xaxis = list(title = "Joviality Score"),
    yaxis = list(title = "Average Savings"),
    margin = list(l = 60, r = 10, t = 60, b = 30),
    plot_bgcolor = "white",
    paper_bgcolor = "white",
    font = list(color = "black"),
    hoverlabel = list(bgcolor = "white", font = list(color = "black")),
    legend = list(title = "Education Level", font = list(color = "black"))
  )

```

### Code

```{r}
#| eval: true
#| output: false

# Create New variable for Savings
final_data$Avg_Savings <- rowMeans(final_data[, c("TotSav_Mar", "TotSav_Apr", "TotSav_May","TotSav_Jun", "TotSav_Jul", "TotSav_Aug","TotSav_Sep", "TotSav_Oct", "TotSav_Nov","TotSav_Dec", "TotSav_Jan", "TotSav_Feb")])

# Round the result to 2 decimal places
final_data$Avg_Savings <- round(final_data$Avg_Savings, 2)

plot_ly(data = final_data, 
        x = ~joviality, 
        y = ~Avg_Savings,
        color = ~educationLevel,
        type = "scatter",
        mode   = 'markers') %>%
  add_trace(
    text = ~paste("Joviality: ", joviality, "<br>",
                  "Avg Savings: $", Avg_Savings),
    hoverinfo = "text",
    showlegend = FALSE
  ) %>%
  layout(
    title = "Correlation between Joviality and Savings by Education",
    xaxis = list(title = "Joviality Score"),
    yaxis = list(title = "Average Savings"),
    margin = list(l = 60, r = 10, t = 60, b = 30),
    plot_bgcolor = "white",
    paper_bgcolor = "white",
    font = list(color = "black"),
    hoverlabel = list(bgcolor = "white", font = list(color = "black")),
    legend = list(title = "Education Level", font = list(color = "black"))
  )

```

### Statistical Test

```{r}
#| echo: false

ggscatterstats(
  data = final_data,
  x = joviality,
  y = Avg_Savings,
  marginal = FALSE,
  ) + 
ggtitle("Correlation betwen Joviality and Savings") +
labs(x = "Joviality Score", y = "Average Savings")
```

### Code

```{r}
#| eval: true
#| output: false

ggscatterstats(
  data = final_data,
  x = joviality,
  y = Avg_Savings,
  marginal = FALSE,
  ) + 
ggtitle("Correlation betwen Joviality and Savings") +
labs(x = "Joviality Score", y = "Average Savings")
```
:::

### 8.2 Recreation Activities and Happiness

Aside from financial stability, another possible driver for happiness could be having meaningful engagements outside of work. As such, using expenditure on recreation activities as a proxy, we explore if those who spend more on recreational activities tended to register higher joviality scores.

::: panel-tabset
### Plot

```{r}
#| echo: false

ggscatterstats(
  data = final_data,
  x = joviality,
  y = Recreation,
  marginal = FALSE,
  ) + 
ggtitle("Correlation betwen Joviality and Recreation") +
labs(x = "Joviality Score", y = "Recreation Expenditure")
```

### Data

```{r}
#| eval: true
#| output: false

ggscatterstats(
  data = final_data,
  x = joviality,
  y = Recreation,
  marginal = FALSE,
  ) + 
ggtitle("Correlation betwen Joviality and Recreation") +
labs(x = "Joviality Score", y = "Recreation Expenditure")
```
:::

Breaking down this relationship further by interest groups, we also observe that this positive correlation is true, across all groups.

Additional analyses of interest groups by size i.e., number of interested residents, and joviality scores recorded no significant differences.

::: callout-note
This finding suggests that taking part and being active in interest group cans lead to a more happier, more fulfilling lives. It is therefore important that the local council look into this aspect e.g, understand the preferences of residents, current infrastructure gaps etc, to better allocate resources and encourage greater participation.
:::

::: panel-tabset
### Plot

```{r}
#| echo: false
 
ggscatterstats(
  data = final_data,
  x = joviality,
  y = Recreation,
  marginal = FALSE,
  ) + 
  ggtitle("Correlation between Joviality and Recreation") +
  labs(x = "Joviality Score", y = "Recreation Expenditure") +
  facet_wrap(~interestGroup)

```

### Data

```{r}
#| eval: true
#| output: false

ggscatterstats(
  data = final_data,
  x = joviality,
  y = Recreation,
  marginal = FALSE,
  ) + 
  ggtitle("Correlation between Joviality and Recreation Expenditure by Interest Groups") +
  labs(x = "Joviality Score", y = "Recreation Expenditure") +
  facet_wrap(~interestGroup)

```
:::

### 8.3 Age and Happiness

Lastly, we look at the relationship between age and joviality. Looking at the scatter plot below, there appeared to be a slight negative correlation between age and joviality. 

::: panel-tabset
### Plot

```{r}
#| echo: false
ggscatterstats(
  data = final_data,
  x = age,
  y = joviality,
  marginal = FALSE,
  )
```

### Code

```{r}
#| eval: true
#| output: false

ggscatterstats(
  data = final_data,
  x = age,
  y = joviality,
  marginal = FALSE,
  )
```
:::

Looking closer at the distribution of joviality scores by 10 year age bands, we also see a larger hump on among residents in their 50s, indicating a score of 0.4 and below. This slope then tapers downards as joviality scores increase. 

::: callout-note
As older residents were once important contributors to the community, the data suggests that more can be done to understand why older residents are noting lower joviality scores. Taking care of the older residents would also put younger residents at ease, knowing that their parents are well taken care off, and they would be too in the future.
:::

::: panel-tabset
### Distribution

```{r}
#| echo: false

ggplot(final_data, 
       aes(x = joviality, 
           y = age_band,
           fill = stat(x))) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Temp. [F]",
                       option = "C") +
  scale_x_continuous(
    name = "Joviality Scores",
    expand = c(0, 0)
  ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  ggtitle("Joviality Scores by Age Bands") +
  theme_ridges()
```

### Code

```{r}
#| echo: false

ggplot(final_data, 
       aes(x = joviality, 
           y = age_band,
           fill = stat(x))) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Temp. [F]",
                       option = "C") +
  scale_x_continuous(
    name = "Joviality Scores",
    expand = c(0, 0)
  ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

:::

## 9 Conclusion

-   There is generally a good spread of residents across all ages in the City of Engagement. Families however, tended to be relatively small; no more than 3, with about 1 in 3 household indicating that they have children at home.

-   Education was also largely divided down the middle, with about half of residents holding a bachelors degree and above. Notably, younger respondents were not more likely to be more educated than older residents in the city. As higher education was found to be highly correlated with income, there may be value for the city council to look into nudging younger residents to further their education, to improve their quality of live in the longer term.

-   When comparing earnings to expenditure, it is noted that the large majority, even those who earned less, tended to spend within their means, indicating good financial health among residents.

-   While higher income allowed wealthier residents to set aside more savings, the financial stability and freedom did not necessarily lead to to higher joviality scores. On the contrary, residents who registered higher expenditure on recreational activities recorded being happier. It may therefore be useful for the council to strategise allocation of resources to these activities, and nudge greater participation among residents.

-   Lastly, it was noted that joviality scores tended to slightly decline with age. It may therefore be useful for the local council to reach out to older residents to understand their concerns, in order to better support their golden years!
