[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html",
    "title": "Hands-on_Ex04_3",
    "section": "",
    "text": "11 Funnel Plots for Fair Comparisons\n11.1 Overview\nFunnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#installing-and-launching-r-packages",
    "title": "Hands-on_Ex04_3",
    "section": "11.2 Installing and Launching R Packages",
    "text": "11.2 Installing and Launching R Packages\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n11.3 Importing Data\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 <- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %>%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#funnelplotr-methods",
    "title": "Hands-on_Ex04_3",
    "section": "11.4 FunnelPlotR methods",
    "text": "11.4 FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n11.4.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n11.4.2 FunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #<<\n  x_range = c(0, 6500),  #<<\n  y_range = c(0, 0.05)   #<<\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. Plot is adjusted for overdispersion.\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n11.4.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  x_range = c(0, 6500),  \n  y_range = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate \\nby Cumulative Total Number of COVID-19 Positive Cases\", #<<           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #<<\n  y_label = \"Cumulative Fatality Rate\"  #<<\n) \n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on_Ex04_3",
    "section": "11.5 Funnel Plot for Fair Visual Comparison: ggplot2 methods",
    "text": "11.5 Funnel Plot for Fair Visual Comparison: ggplot2 methods\nIn this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n11.5.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf <- covid19 %>%\n  mutate(rate = Death / Positive) %>%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%\n  filter(rate > 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n11.5.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq <- seq(1, max(df$Positive), 1)\nnumber.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI <- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n11.5.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np <- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\n\nWarning in geom_point(aes(label = `Sub-district`), alpha = 0.4): Ignoring\nunknown aesthetics: label\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np\n\n\n\n\n\n\n11.5.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly <- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#references",
    "title": "Hands-on_Ex04_3",
    "section": "11.6 References",
    "text": "11.6 References\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html",
    "title": "Hands-on_Ex04.2",
    "section": "",
    "text": "Visualising the uncertainty of point estimates\n\n\n\n\n\n\n\nNote\n\n\n\n\nA point estimate is a single number, such as a mean.\nUncertainty is expressed as standard error, confidence interval, or credible interval\nImportant:\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\n\n\npacman::p_load(tidyverse, plotly, crosstalk, DT, ggdist, gganimate)\nexam <- read_csv(\"data/Exam_data.csv\")\n\n\n\n\ngroup the observation by RACE,\ncomputes the count of observations, mean, standard deviation and standard error of Maths by RACE, and\nsave the output as a tibble data table called my_sum.\n\n\nmy_sum <- exam %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\n\nNext, the code chunk below will\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n \n  \n    RACE \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    Chinese \n    193 \n    76.50777 \n    15.69040 \n    1.132357 \n  \n  \n    Indian \n    12 \n    60.66667 \n    23.35237 \n    7.041005 \n  \n  \n    Malay \n    108 \n    57.44444 \n    21.13478 \n    2.043177 \n  \n  \n    Others \n    9 \n    69.66667 \n    10.72381 \n    3.791438 \n  \n\n\n\n\n\n\n\n\nThe code chunk below is used to reveal the standard error of mean maths score by race.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by race\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x= reorder(RACE,mean), \n        ymin=mean - 1.96*se, \n        ymax=mean + 1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\nd <- highlight_key(my_sum) \np <- ggplot(my_sum) +\n  geom_errorbar(\n    aes(x= reorder(RACE,mean), \n        ymin=mean - 2.58*se, \n        ymax=mean + 2.58*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"99% confidence interval of mean maths score by race\")\n\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +   #<<\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\nGentle advice: This function comes with many arguments, it is advised to read the syntax reference for more detail.\n\nexam %>%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\nWarning in layer_slabinterval(data = data, mapping = mapping, stat =\nStatPointinterval, : Ignoring unknown parameters: `.point` and `.interval`\n\n\n\n\n\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\nWarning: fill_type = \"gradient\" is not supported by the current graphics device.\n - Falling back to fill_type = \"segments\".\n - If you believe your current graphics device *does* support\n   fill_type = \"gradient\" but auto-detection failed, set that option\n   explicitly and consider reporting a bug.\n - See help(\"geom_slabinterval\") for more information.\n\n\n\n\n\n\n\n\n\nStep 1: Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nSkipping install of 'ungeviz' from a github remote, the SHA1 (aeae12b0) has not changed since last install.\n  Use `force = TRUE` to force installation\n\n\nStep 2: Launch the application in R\n\nlibrary(ungeviz)\n\n\n\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    linewidth = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html",
    "title": "Hands-on_Ex04_1",
    "section": "",
    "text": "To gain hands-on experience using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters\n\n\n\n\n\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:\n\n\n\n\n\n\n\n\nIn this exercise, ggstatsplot and tidyverse will be used. Similar to earlier exercises, pacman will be used to load the packages.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\nas_tibble(exam_data)\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234) #always need to set seed when using bayes stats\n\ngghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60, #test the null hypothesis that mean = 60\n  xlab = \"English scores\"\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as:\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam_data,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that there are multiple options for pairwise display:\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n\nBelow is a summary of between-subject tests that can be carried out for each type of analyses:\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 <- exam_data %>% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n\n\n\n\n\n\n\n\nIn this section, you will learn how to visualise model diagnostic and model parameters by using parameters package.\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\n\n\n\n\n\npacman::p_load(readxl, performance, parameters, see)\n\n\n\n\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   <dbl> <chr>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>         <dbl>  <dbl>\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period <dbl>, HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>, …\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that the output object car_resale is a tibble data frame. To read more on tibble data frame, click here.\n\n\n\n\n\n\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\nVariable `Component` is not in your data frame :/\n\n\n\n\n\n\n\n\nIn the code chunk, check_normality() of performance package.\nNote: Manufacturing year is also removed since it is highly correlated with the age of the car.\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n <- check_normality(model1)\nplot(check_n)\n\n\n\n\n\n\n\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h <- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\n\n\n\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)\n\n\n\n\n\n\n\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html",
    "title": "Hands-on Exercise 3.1",
    "section": "",
    "text": "To create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n\nFirst, we install and lanch the following R Packages.\n\nggiraph: For making ‘ggplot’ graphics interactive.\nplotly: R library for plotting interactive statistical graphs.\nDT: Provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse: A family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork: For combining multiple ggplot2 graphs into one figure.\n\nSimilar to previous exercises, we will use pacman to install the packages.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\n\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data <- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\n\n\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements. If it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip <- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender = \", exam_data$GENDER)) \n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first four lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID, Class, Gender will be displayed.\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; font-size: 5; color:black;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                                        \n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip <- function(y, ymax, accuracy = .01) {\n  mean <- scales::number(y, accuracy = accuracy)\n  sem <- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)  \n\n\n\n\n\n\n\nInfo\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill=orange”.\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\ncss_hover <- girafe_css_bicolor(primary = \"pink\", secondary = \"black\")\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = css_hover),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)  \n\n\n\n\n\n\n\nInfo\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\ncss_hover <- girafe_css_bicolor(primary = \"pink\", secondary = \"black\")\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS,\n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = css_hover),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)  \n\n\n\n\n\n\n\nInfo\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\n\n\n\nInfo\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\n\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\nAppropriate interactive functions of ggiraph will be used to create the multiple views. patchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID,\n        data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID,\n        data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\nby using plot_ly(),\n\nand by using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nPlotCode Chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH,\n        type = \"scatter\",\n        mode   = 'markers')\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nPlotCode Chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH,\n            color = ~RACE,\n        type = \"scatter\",\n        mode   = 'markers')\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nClick on the colour symbol at the legend to select data points of specific race.\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nPlotCode Chunk\n\n\n\n\n\n\n\n\n\n\n\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot()of plotly package is used to place them next to each other side-by-side.\n\n\nPlotCode Chunk\n\n\n\n\n\n\n\n\n\n\n\nd <- highlight_key(exam_data)\np1 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk.\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\n\nPlotCode Chunk\n\n\n\n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd <- highlight_key(exam_data) \np <- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5) \n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function.\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\n\n\n\n\n\n\n\n\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html",
    "title": "Hands-on Exercise 3.2",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, we will:\n\nCreate animated data visualisation by using gganimate and plotly r packages\nReshape data by using tidyr package\nProcess, wrangle and transform data by using dplyr package\n\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.\n\n\n\n\n\n\n\n\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate_each_(funs(factor(.)), col) %>%\n  mutate(Year = as.integer(Year))\n\nWarning: `mutate_each_()` was deprecated in dplyr 0.7.0.\nℹ Please use `across()` instead.\n\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\n\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\nThe animated bubble chart\n\n\n\n\n\n\n\n\n\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\ngg <- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot.\nThe output is then saved as an R object called gg. ggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nbp <- globalPop %>%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent, \n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp\n\n\n\n\n\n\n\n\n\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "The goal of this exercise is to achieve the following:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.2 Getting Started",
    "text": "2.2 Getting Started\n\n2.2.1 Installing and loading the required libraries\nAside from tidyverse, 4 other R packages will be used. There are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nThe code chunk below uses p_load() of pacman package.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data <- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.3 Beyond ggplot2 Annotation: ggrepel",
    "text": "2.3 Beyond ggplot2 Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  ggtitle(\"English Scores versus Maths scores for Primary 3\") +\n  geom_smooth(method=lm, linewidth=0.5) +\n  geom_label(aes(label = ID), hjust = .5, vjust = -.5) +\n  coord_cartesian(xlim=c(0,100), ylim =c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our example above.\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\n2.3.1 Working with ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  ggtitle(\"English Scores versus Maths scores for Primary 3\") +\n  geom_smooth(formula = y ~ x, method=lm, size=0.5) +\n  geom_label_repel(aes(label = ID), fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100), ylim =c(0,100))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.4 Beyond ggplot2 Themes",
    "text": "2.4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") + \n  ggtitle(\"Distribution of Maths Scores in Theme Grey\") +\n  theme_gray()\n\n\n\n\n\n2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") + \n  ggtitle(\"Distribution of Maths Scores\") +\n  labs(y= \"Number of Pupils\", x = \"Maths Scores\") +\n  theme_economist()\n\n\n\n\n\n\n2.4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  labs(y= \"Number of Pupils\", x = \"Maths Scores\") +\n  theme_ipsum()\n\n\n\n\nHow can we customise our chart? Consult this vignette to learn more.\n::: callout-note\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  labs(y= \"Number of Pupils\", x = \"Maths Scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.5 Beyond Single Graph",
    "text": "2.5 Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\nGraph 1\n\np1 <- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\np1\n\n\n\n\nGraph 2\n\np2 <- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\np2\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below:\n\np3 <- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x,method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\np3\n\n\n\n\n\n2.5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\np1 + p2\n\n\n\n\n\n\n2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\nTo learn more, refer to Plot Assembly.\n\n\n2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A')\n\n\n\n\n\n\n2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 0.95)\n\n\n\n\n\n\n2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist() +\n  theme(plot.title = element_text(size = 8),\n          axis.title.y = element_text(size = 6),\n          axis.title.x = element_text(size = 6),\n          axis.text.y = element_text(size = 6),\n          axis.text.x = element_text(size = 6))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.6 Reference",
    "text": "2.6 Reference\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Learn the basic principles and essential components of ggplot2\nGain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics2\nApply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "1.2.1 Install and launching R packages",
    "text": "1.2.1 Install and launching R packages\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "1.2.2 Importing the data",
    "text": "1.2.2 Importing the data\n\nexam_data <- read.csv(\"data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "1.3.1 R Graphics VS ggplot",
    "text": "1.3.1 R Graphics VS ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "1.4.1 A Layered Grammar of Graphics",
    "text": "1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "title": "Hands-on Exercise 1",
    "section": "1.7.1 Geometric Objects: geom_bar",
    "text": "1.7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "title": "Hands-on Exercise 1",
    "section": "1.7.2 Geometric Objects: geom_dotplot",
    "text": "1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_dotplot(dotsize =0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\nscale_y_continuous() is used to turn off the y-axis, and binwidth argument is used to change the binwidth to 2.5.\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "title": "Hands-on Exercise 1",
    "section": "1.7.3 Geometric Objects: geom_histogram()",
    "text": "1.7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on Exercise 1",
    "section": "1.7.4 Modifying a geometric object by changing geom()",
    "text": "1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color,\nand color argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1",
    "section": "1.7.5 Modifying a geometric object by changing aes()",
    "text": "1.7.5 Modifying a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "title": "Hands-on Exercise 1",
    "section": "1.7.6 Geometric Objects: geom-density()",
    "text": "1.7.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_density()\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           colour = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "title": "Hands-on Exercise 1",
    "section": "1.7.7 Geometric Objects: geom_boxplot",
    "text": "1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot()\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "title": "Hands-on Exercise 1",
    "section": "1.7.8 Geometric Objects: geom_violin",
    "text": "1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "title": "Hands-on Exercise 1",
    "section": "1.7.9 Geometric Objects: geom_point()",
    "text": "1.7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "title": "Hands-on Exercise 1",
    "section": "1.7.10 geom objects can be combined",
    "text": "1.7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "title": "Hands-on Exercise 1",
    "section": "1.8.1 Working with stat()",
    "text": "1.8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-on Exercise 1",
    "section": "1.8.2 Working with stat - the stat_summary() method",
    "text": "1.8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-on Exercise 1",
    "section": "1.8.3 Working with stat - the geom() method",
    "text": "1.8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on Exercise 1",
    "section": "1.8.4 Adding a best fit curve on a scatterplot?",
    "text": "1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\neval= FALSE\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() \n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess. Locally estimated scatterplot smoothing, or LOESS, is a nonparametric method for smoothing a series of data in which no assumptions are made about the underlying structure of the data. LOESS uses local regression to fit a smooth curve through a scatterplot of data.\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1",
    "section": "1.9.1 Working with facet_wrap()",
    "text": "1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "Hands-on Exercise 1",
    "section": "1.9.2 facet_grid() function",
    "text": "1.9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on Exercise 1",
    "section": "1.10.1 Working with Coordinate",
    "text": "1.10.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1",
    "section": "1.10.2 Changing the y- and x-axis range",
    "text": "1.10.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "title": "Hands-on Exercise 1",
    "section": "1.11.1 Working with theme",
    "text": "1.11.1 Working with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Take-Home_Exercises/Take-Home_Ex01/take-home_Ex01.html",
    "href": "Take-Home_Exercises/Take-Home_Ex01/take-home_Ex01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "City of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things.\n\n\n\nIn this take-home exercise, we will apply the concepts and methods learned in Lesson 1-4 to reveal the demographic and financial characteristics of the city of Engagement.\nThe goal is to build effective solutions to help city managers and planners to explore the complex data, to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received.\n\n\n\nFor the purpose of this study, two data sets will be analysed. They are:\n\nParticipants.csv: Contains information about the residents of City of Engagement that have agreed to participate in this study.\nFinancialJournal.csv: Contains information about financial transactions of residents in the city.\n\n\n\n\nFirst, the necessary packages are installed and loaded onto RStudio.\n\npacman::p_load(ggplot2, tidyverse, ggrepel, patchwork, \n               ggthemes,hrbrthemes,ggiraph, plotly, \n               patchwork, DT, readxl, gifski, gapminder,\n               gganimate, crosstalk, ggstatsplot, dplyr, lubridate, ggnewscale, broom, knitr, ggridges, viridis, ggdist, ggridges, colorspace)\n\nThe Participants.csv and FinancialJournal.csv data is then imported from csv using readr::read_csv() and saved under “Participants” and “Finance”, respectively.\n\nparticipants <- read_csv(\"data/Participants.csv\", show_col_types = FALSE)\nfinance <- read_csv(\"data/FinancialJournal.csv\", show_col_types = FALSE)\n\n\n\n\nBefore jumping into visualising the data. We first review the data to understand its data structure and clean the data, where necessary, in preparation for visualisation. Looking at the both datasets, a few problems were observed.\n\n\nAs newer versions of readr don’t report the full column specification when data files are loaded. We will use the spec() function to better understand the full column specification:\n\nResults from running the spec() function highlighted that multiple columns were not set to the most appropriate data type; dplyr::mutate will be used to correct this.\n\nparticipantId is in <dbl> format. It should be reformatted to <factor>.\ninterestGroup is in <chr> format. It should be reformatted to <factor>.\neducationLevel is in <chr> format. It should be reformatted to factor, and ordered from low to high.\n\n\n\n\nCode\nspec(participants)\n\nparticipants <- participants %>% mutate_at(c('participantId', 'interestGroup', 'educationLevel'), as.factor)\n\nparticipants$educationLevel <- ordered(participants$educationLevel, levels = c(\"Low\", \"HighSchoolOrCollege\", \"Bachelors\", \"Graduate\"))\n\n\n\nIn order to have the flexibility to analyse the age variable in bands, we will also re-code the age variable into 10 year bands using the cut() function. The new variable is saved under age_band.\n\n\n\nCode\n# Recode ages into 10-year age bands\n# Define breaks and labels\nbreaks <- seq(10, 70, by = 10)\nlabels <- c(\"10-19\", \"20-29\", \"30-39\", \"40-49\", \"50-59\", \"60+\")\n\n# Recode age variable\nparticipants$age_band <- cut(participants$age, breaks = breaks, labels = labels)\n\n\n\n\n\nSimilar to the Participants dataset, multiple issues were observed in the FinancialJournal dataset as well. They were:\n\nparticipantId is in <dbl> format. It should be reformatted to <factor>.\ncategory is in <chr> format. It should be reformatted to <factor>.\n\n\n\nCode\nspec(finance)\nfinance <-finance %>% mutate_at(c('participantId', 'category'), as.factor)\n\n\n\nCurrently, the variable timestamp provides very micro level breakdown of spending pattern; down to the minute. This may not be useful when trying to understanding broad consumption patterns. As such, using lubridate::as.Date the timestamp variable was reformatted to “%Y-%m-%d” and a new variable, MonthYear was created to extract only the year and month data from timestamp.\n\n\n\nCode\nfinance$timestamp <- as.Date(finance$timestamp, format = \"%Y-%m-%d\")\n\n#Extracting month year\nfinance$MonthYear <- format(as.Date(finance$timestamp), \"%Y-%m\")\n\n\n\n1,113 duplicated rows were also observed in the Finance dataset. Using distinct() these rows should be removed from subsequent analyses. The truncated dataset will be saved under fin_new.\n\n\n\nCode\nfin_new <- finance %>% distinct()\n\n\n\nUnder the amount variable in FinancialJournal, inflow and outflow of money transacted is recorded using positive and negative numbers, respectively. This may cause confusion when visualising the data. We will process the data and use the absolute values using abs().\n\n\n\nCode\nfin_new$amount <- abs(fin_new$amount)\n\n\n\nTo ensure completeness of data, we also look at the data at the participant level. From the histogram below, it is clear that a cluster of 131 participants had very few, close to zero transactions. This may be due to participants dropping out from the study, or moving away from the town. Since little to no financial data were collected from these participants, these participants will be removed from subsequent analyses using filter().\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nfin_grouped <- fin_new %>%\n  group_by(participantId) %>%\n  dplyr::summarize(transaction_count = n()) %>%\n  arrange(transaction_count)\n\np <- ggplot(data=fin_grouped, \n       aes(x = transaction_count)) +\n  geom_histogram(bins = 39,\n                color=\"black\",      \n                fill=\"steelblue\") +\n  ggtitle(\"Distribution of Transactions among Participants\") +\n  xlab(\"Transaction Count\") + \n  ylab(\"Number of Participants\") +\n  theme_classic()\n\np <- ggplotly(p, tooltip=c(\"y\"))\n\n# display the plot\np\n\n\n\n\n\n\nCode\n# Find participant IDs in fin_grouped with transaction count < 500\nparticipants_to_remove <- fin_grouped %>%\n  filter(transaction_count < 500) %>%\n  pull(participantId)\n\n# Filter out rows in fin_new for those participants\nfin_new <- fin_new %>%\n  filter(!participantId %in% participants_to_remove)\n\n\n\nCurrently, the data is in a long format, with each row representing 1 transaction. We will transform the data using pivot_wider() to a wide format instead.\n\n\n\nCode\nfin_final <- fin_new %>%\n  group_by(participantId, category, MonthYear) %>%\n  summarise(Total = sum(amount))\n\nfin_final <- pivot_wider(\n  fin_final,names_from = category,values_from =Total)\n\nfin_wide <- fin_final %>%\n  pivot_wider(names_from = MonthYear, values_from = c(Education, Food, Recreation, Shelter, Wage, RentAdjustment))\n\n#convert all NA values to 0 \nfin_wide[is.na(fin_wide)] <- 0\n\n\n\nBefore merging, we will create the following new variables using mutate():\n\nTotal Expenditure across categories, across months e.g., TotExp_Mar\nTotal Earnings, across months e.g., TotEarn_Mar\nTotal Savings, across months calculated using TotEarn - TotExp for each month\n\n\n\n\nCode\n#Total expenditure across months\nfin_wide <- fin_wide %>%\n  mutate(\n    TotExp_Mar = `Education_2022-03` + `Food_2022-03` + `Recreation_2022-03` + `Shelter_2022-03`,\n    TotExp_Apr = `Education_2022-04` + `Food_2022-04` + `Recreation_2022-04` + `Shelter_2022-04`,\n    TotExp_May = `Education_2022-05` + `Food_2022-05` + `Recreation_2022-05` + `Shelter_2022-05`,\n    TotExp_Jun = `Education_2022-06` + `Food_2022-06` + `Recreation_2022-06` + `Shelter_2022-06`,\n    TotExp_Jul = `Education_2022-07` + `Food_2022-07` + `Recreation_2022-07` + `Shelter_2022-07`,\n    TotExp_Aug = `Education_2022-08` + `Food_2022-08` + `Recreation_2022-08` + `Shelter_2022-08`,\n    TotExp_Sep = `Education_2022-09` + `Food_2022-09` + `Recreation_2022-09` + `Shelter_2022-09`,\n    TotExp_Oct = `Education_2022-10` + `Food_2022-10` + `Recreation_2022-10` + `Shelter_2022-10`,\n    TotExp_Nov = `Education_2022-11` + `Food_2022-11` + `Recreation_2022-11` + `Shelter_2022-11`,\n    TotExp_Dec = `Education_2022-12` + `Food_2022-12` + `Recreation_2022-12` + `Shelter_2022-12`,\n    TotExp_Jan = `Education_2023-01` + `Food_2023-01` + `Recreation_2023-01` + `Shelter_2023-01`,\n    TotExp_Feb = `Education_2023-02` + `Food_2023-02` + `Recreation_2023-02` + `Shelter_2023-02`\n)\n\n#Total Earnings across months\nfin_wide <- fin_wide %>%\n  mutate(\n    TotEarn_Mar = `Wage_2022-03` + ifelse(is.na(`RentAdjustment_2022-03`), 0, `RentAdjustment_2022-03`),\n    TotEarn_Apr = `Wage_2022-04` + ifelse(is.na(`RentAdjustment_2022-04`), 0, `RentAdjustment_2022-04`),\n    TotEarn_May = `Wage_2022-05` + ifelse(is.na(`RentAdjustment_2022-05`), 0, `RentAdjustment_2022-05`),\n    TotEarn_Jun = `Wage_2022-06` + ifelse(is.na(`RentAdjustment_2022-06`), 0, `RentAdjustment_2022-06`),\n    TotEarn_Jul = `Wage_2022-07` + ifelse(is.na(`RentAdjustment_2022-07`), 0, `RentAdjustment_2022-07`),\n    TotEarn_Aug = `Wage_2022-08` + ifelse(is.na(`RentAdjustment_2022-08`), 0, `RentAdjustment_2022-08`),\n    TotEarn_Sep = `Wage_2022-09` + ifelse(is.na(`RentAdjustment_2022-09`), 0, `RentAdjustment_2022-09`),\n    TotEarn_Oct = `Wage_2022-10` + ifelse(is.na(`RentAdjustment_2022-10`), 0, `RentAdjustment_2022-10`),\n    TotEarn_Nov = `Wage_2022-11` + ifelse(is.na(`RentAdjustment_2022-11`), 0, `RentAdjustment_2022-11`),\n    TotEarn_Dec = `Wage_2022-12` + ifelse(is.na(`RentAdjustment_2022-12`), 0, `RentAdjustment_2022-12`),\n    TotEarn_Jan = `Wage_2023-01` + ifelse(is.na(`RentAdjustment_2023-01`), 0, `RentAdjustment_2023-01`),\n    TotEarn_Feb = `Wage_2023-02` + ifelse(is.na(`RentAdjustment_2023-02`), 0, `RentAdjustment_2023-02`))\n\n#Total Savings across months\nfin_wide <- fin_wide %>%\n  mutate(\n    TotSav_Mar = TotEarn_Mar - TotExp_Mar,\n    TotSav_Apr = TotEarn_Apr - TotExp_Apr,\n    TotSav_May = TotEarn_May - TotExp_May,\n    TotSav_Jun = TotEarn_Jun - TotExp_Jun,\n    TotSav_Jul = TotEarn_Jul - TotExp_Jul,\n    TotSav_Aug = TotEarn_Aug - TotExp_Aug,\n    TotSav_Sep = TotEarn_Sep - TotExp_Sep,\n    TotSav_Oct = TotEarn_Oct - TotExp_Oct,\n    TotSav_Nov = TotEarn_Nov - TotExp_Nov,\n    TotSav_Dec = TotEarn_Dec - TotExp_Dec,\n    TotSav_Jan = TotEarn_Jan - TotExp_Jan,\n    TotSav_Feb = TotEarn_Feb - TotExp_Feb\n  )\n\n\n\n\n\nLastly, using merge(), both datasets (i.e., participants and fin_wide) will be combined to allow comparisons of financial data between different demographic groups. The new dataset will be saved under final_data.\n\n\nCode\n# merge the datasets\nmerged <- merge(fin_wide, participants, by = \"participantId\", all.x = TRUE)\n\n# subset the merged dataset to keep only the rows with participantId in fin_wide\nfinal_data <- subset(merged, participantId %in% fin_wide$participantId)\n\n\n\n\n\n\nTo have a quick overview of the demographic profile of residents, simple pie charts are used. Specifically, these charts are good when trying to show whole to part relationships, and are useful when there are not too many categories within variables.\n\n\nResidents of the city tended to have small families; no more than 3 members per household. Looking at the two charts side-by-side, we also see that the sample proportion of families with 3 members is the same at the proportion of families with children.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Calculate the proportion of respondents in each HHsize band category\nfinal_data$householdSize <- as.factor(final_data$householdSize)\nhousehold_props <- final_data %>%\n  count(householdSize) %>%\n  mutate(prop = n / sum(n))\n\n# Create a pie chart with the household size\np3 <- ggplot(household_props, aes(x = \"\", y = prop, fill = householdSize)) +\n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  coord_polar(theta = \"y\", start = 0, direction = -1) +\n  scale_fill_manual(values = c(\"pink1\", \"pink3\", \"pink4\")) +\n  theme_void() +\n  theme(legend.position = \"right\",\n        plot.title = element_text(size = 12, face = \"bold\", hjust = 0.5),\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 8)) +\n  labs(fill = \"Education Level\") +\n  geom_text(aes(label = paste0(round(prop*100), \"%\")), position = position_stack(vjust = 0.5), size = 3) +\n  ggtitle(\"Residents by Household Size(%)\")\n\n# Calculate the proportion of respondents havekids category\nfinal_data$haveKids <- as.factor(final_data$haveKids)\nkids_props <- final_data %>%\n  count(haveKids) %>%\n  mutate(prop = n / sum(n))\n\n# Create a pie chart using havekids variable\np4 <- ggplot(kids_props, aes(x = \"\", y = prop, fill = haveKids)) +\n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  coord_polar(theta = \"y\", start = 0, direction = -1) +\n  scale_fill_manual(values = c(\"orange\", \"skyblue\")) +\n  theme_void() +\n  theme(legend.position = \"right\",\n        plot.title = element_text(size = 12, face = \"bold\", hjust = 0.5),\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 8)) +\n  labs(fill = \"Have Kids\") +\n  geom_text(aes(label = paste0(round(prop*100), \"%\")), position = position_stack(vjust = 0.5), size = 3) +\n  ggtitle(\"Residents by whether they have kids(%)\")\n\n(p3 + p4)\n\n\n\n\n\n\n\nThe age of residents living in the city were relatively evenly distributed, with close to one-third of the population (30%) made up by younger respondents below the ages of 30. Close to half were high school or college educated, while a similar proportion had a bachelor’s degree or higher.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Calculate the proportion of respondents in each age band category\nage_band_props <- final_data %>%\n  count(age_band) %>%\n  mutate(prop = n / sum(n))\n\n# Create a pie chart with the age band proportions\np1 <- ggplot(age_band_props, aes(x = \"\", y = prop, fill = age_band)) +\n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  coord_polar(theta = \"y\", start = 0, direction = -1) +\n  scale_fill_manual(values = c(\"skyblue1\", \"skyblue2\", \"skyblue3\", \"skyblue4\", \"darkslategrey\", \"grey25\")) +\n  theme_void() +\n  theme(legend.position = \"right\",\n        plot.title = element_text(size = 12, face = \"bold\", hjust = 0.5),\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 8)) +\n  labs(fill = \"Age Band\") +\n  geom_text(aes(label = paste0(round(prop*100), \"%\")), position = position_stack(vjust = 0.5), size = 3) +\n  ggtitle(\"Residents by Age Band (%)\")\n\n# Calculate the proportion of respondents in each education band category\neducation_props <- final_data %>%\n  count(educationLevel) %>%\n  mutate(prop = n / sum(n))\n\n# Create a pie chart with the age band proportions\np2 <- ggplot(education_props, aes(x = \"\", y = prop, fill = educationLevel)) +\n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  coord_polar(theta = \"y\", start = 0, direction = -1) +\n  scale_fill_manual(values = c(\"darkseagreen1\", \"darkseagreen3\", \"darkseagreen4\", \"darkslategrey\")) +\n  theme_void() +\n  theme(legend.position = \"right\",\n        plot.title = element_text(size = 12, face = \"bold\", hjust = 0.5),\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 8)) +\n  labs(fill = \"Education Level\") +\n  geom_text(aes(label = paste0(round(prop*100), \"%\")), position = position_stack(vjust = 0.5), size = 3) +\n  ggtitle(\"Residents by Education Level(%)\")\n\n(p1 + p2)\n\n\n\n\nAs a next step, let’s explore whether there is a relationship between age and education. Since the distribution of age departed from normality, we will use the non-parametric Kruskal-Wallis test. Looking at the boxplots, it was observed that there was no statistically significant correlations between the two variables.\n\n\n\n\n\n\nNote\n\n\n\nThis means that the education levels of younger residents were comparable to older residents. Since education levels are commonly tied to income, this finding may suggest low social mobility among residents in the city. As such, we will explore the relationship between education and wage next.\n\n\n\nPlotCodeNormality TestCode\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = final_data,\n  x = educationLevel, \n  y = age,\n  type = \"np\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE) +\n  theme_classic() +\n  theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.5),\n       axis.title = element_text(size = 12),\n        axis.text = element_text(size = 7),\n        legend.position = \"none\") +\n  labs(x = \"Education Level\", y = \"Age\") +\n  ggtitle(\"Age by Education Level\")\n\n\n\n\n\n\n\n\n\n\n\n# Calculate Shapiro-Wilk test statistic and p-value\nsw_test <- shapiro.test(final_data$age)\nsw_stat <- sw_test$statistic\nsw_p <- sw_test$p.value\n\nggplot(final_data,\n       aes(sample=age)) +\n  stat_qq() +\n  stat_qq_line() +\n  annotate(\"text\", x = -1.5, y = -2.5, \n           label = paste(\"Shapiro-Wilk test:\", \"\\n\", \"statistic =\", round(sw_stat, 3), \"\\n\", \"p-value =\", format(sw_p, scientific = TRUE, digits = 3)), \n           hjust = 0, vjust = 0, size = 3, color = \"black\")+\n  ggtitle(\"Distribution - Age\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.5),\n       axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10)) +\n  labs(y = \"Age\")\n\n\n\n\n\n\n\nIn order to further explore income, a new variable, mean_wage, was calculated using rowMeans().\n\n\nCode\n# Select the columns that contain wage information\nwage_cols <- grepl(\"^Wage_20\", names(final_data))\n\n# Calculate the average wage\nfinal_data$mean_wage <- rowMeans(final_data[, wage_cols], na.rm = TRUE)\n\n\nBefore running the confirmatory data analysis, aligned with earlier analysis, a normality assumption test for the distribution of average wage among residents was performed. From the qqplot below, we can see that the distribution of average wage significantly departed from normality. Due to this outcome, we will use a non-parametric test.\nLooking at the boxplot, we can see that wage earned by residents were significantly different between education levels. Specifically, residents who received more education, were more likely to earn a higher wage.\n\n\n\n\n\n\nNote\n\n\n\nAs education was found to be positively correlated with wages, there may be value in looking at how residents, especially younger residents, can be nudged to continue their education. Specifically, the local council can seek to understand any barriers towards further education, and interests among citizens.\n\n\n\nPlotCodeNormality TestCode\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = final_data,\n  x = educationLevel, \n  y = mean_wage,\n  type = \"np\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE) +\n  theme_classic() +\n  theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.5),\n       axis.title = element_text(size = 12),\n        axis.text = element_text(size = 7),\n        legend.position = \"none\") +\n  labs(x = \"Education Level\", y = \"Income\") +\n  ggtitle(\"Income by Education Level\")\n\n\n\n\n\n\n\n\n\n\n\n# Select the columns that contain wage information\nwage_cols <- grepl(\"^Wage_20\", names(final_data))\n\n# Calculate the average wage\nfinal_data$mean_wage <- rowMeans(final_data[, wage_cols], na.rm = TRUE)\n\n# Calculate Shapiro-Wilk test statistic and p-value\nsw_test <- shapiro.test(final_data$mean_wage)\nsw_stat <- sw_test$statistic\nsw_p <- sw_test$p.value\n\nggplot(final_data,\n       aes(sample=mean_wage)) +\n  stat_qq() +\n  stat_qq_line() +\n  annotate(\"text\", x = -1.5, y = -2.5, \n           label = paste(\"Shapiro-Wilk test:\", \"\\n\", \"statistic =\", round(sw_stat, 3), \"\\n\", \"p-value =\", format(sw_p, scientific = TRUE, digits = 3)), \n           hjust = 0.5, vjust = -1.5, size = 3, color = \"black\")+\n  ggtitle(\"Distribution - Wage\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.5),\n       axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10)) +\n  labs(y = \"Wage\")\n\n\n\n\n\n\n\n\n\n\nIn order to chart earnings and expenditure patterns over time. We will transform resident’s earnings and expenditure data into long form using mutate(). A new dataframe named ‘Earn_Exp_avg’ with the following variables will be created:\n\nMonth: Date in ‘YYYY-MM’ format\nEducationLevel: No change from original data\nAvg_Earning: Average monthly earnings i.e., both wage and rentadjustments\nAvg_Expenditure: Average monthly expenditure\nAvg_Savings: Calculated variable deducting monthly expenditure from monthly earnings\n\n\n\nCode\n#Transform Earning Data to long form\nEarn_data_long <- final_data %>%\n  select(participantId, educationLevel, starts_with(\"TotEarn\")) %>%\n  gather(key = \"Month\", value = \"Earning\", starts_with(\"TotEarn\"))\n\nEarn_data_long_renamed <- Earn_data_long %>% \n  mutate(Month = case_when(\n    Month == \"TotEarn_Mar\" ~ \"2022-03\",\n    Month == \"TotEarn_Apr\" ~ \"2022-04\",\n    Month == \"TotEarn_May\" ~ \"2022-05\",\n    Month == \"TotEarn_Jun\" ~ \"2022-06\",\n    Month == \"TotEarn_Jul\" ~ \"2022-07\",\n    Month == \"TotEarn_Aug\" ~ \"2022-08\",\n    Month == \"TotEarn_Sep\" ~ \"2022-09\",\n    Month == \"TotEarn_Oct\" ~ \"2022-10\",\n    Month == \"TotEarn_Nov\" ~ \"2022-11\",\n    Month == \"TotEarn_Dec\" ~ \"2022-12\",\n    Month == \"TotEarn_Jan\" ~ \"2023-01\",\n    Month == \"TotEarn_Feb\" ~ \"2023-02\",\n    TRUE ~ Month\n  )) %>% \n  rename(Month_renamed = Month)\n\nEarn_data_long_renamed$Month <- as.Date(paste0(Earn_data_long_renamed$Month, \"-01\"), format = \"%Y-%m-%d\")\n\nEarn_data_long_renamed <- as_tibble(Earn_data_long_renamed)\n\n#Transform Exp Data to long form\nExp_data_long <- final_data %>%\n  select(participantId, educationLevel, starts_with(\"TotExp\")) %>%\n  mutate(across(starts_with(\"TotExp\"), ~coalesce(., 0))) %>%\n  gather(key = \"Month\", value = \"Expenditure\", starts_with(\"TotExp\"))\n\nExp_data_long_renamed <- Exp_data_long %>% \n  mutate(Month = case_when(\n    Month == \"TotExp_Mar\" ~ \"2022-03\",\n    Month == \"TotExp_Apr\" ~ \"2022-04\",\n    Month == \"TotExp_May\" ~ \"2022-05\",\n    Month == \"TotExp_Jun\" ~ \"2022-06\",\n    Month == \"TotExp_Jul\" ~ \"2022-07\",\n    Month == \"TotExp_Aug\" ~ \"2022-08\",\n    Month == \"TotExp_Sep\" ~ \"2022-09\",\n    Month == \"TotExp_Oct\" ~ \"2022-10\",\n    Month == \"TotExp_Nov\" ~ \"2022-11\",\n    Month == \"TotExp_Dec\" ~ \"2022-12\",\n    Month == \"TotExp_Jan\" ~ \"2023-01\",\n    Month == \"TotExp_Feb\" ~ \"2023-02\",\n    TRUE ~ Month\n  )) %>% \n  rename(Month_renamed = Month)\n\nExp_data_long_renamed$Month <- as.Date(paste0(Earn_data_long_renamed$Month, \"-01\"), format = \"%Y-%m-%d\")\n\nExp_data_long_renamed <- as_tibble(Exp_data_long_renamed)\n#sum(is.na(Exp_data_long_renamed$Expenditure))\n\n# Group and summarize earning data by month\nEarn_data_avg <- Earn_data_long_renamed %>% \n  group_by(Month, educationLevel) %>% \n  summarize(avg_earning = mean(Earning))\n\n# Group and summarize expenditure data by month\nExp_data_avg <- Exp_data_long_renamed %>% \n  group_by(Month, educationLevel) %>% \n  summarize(avg_expenditure = mean(Expenditure))\n\nEarn_Exp_avg <- full_join(Earn_data_avg, Exp_data_avg, \n                           by = c(\"educationLevel\", \"Month\"))\n\n# Create a new column for savings\nEarn_Exp_avg$savings <- Earn_Exp_avg$avg_earning - Earn_Exp_avg$avg_expenditure\n\n#Round values to 2dp\nEarn_Exp_avg$avg_expenditure <- round(Earn_Exp_avg$avg_expenditure, 2)\nEarn_Exp_avg$avg_earning <- round(Earn_Exp_avg$avg_earning, 2)\nEarn_Exp_avg$savings <- round(Earn_Exp_avg$savings, 2)\n\n#Rename Columns \nEarn_Exp_avg <- Earn_Exp_avg %>% rename(Education_Level = educationLevel, Avg_Earning = avg_earning, Avg_Expenditure = avg_expenditure, Avg_Savings = savings)\n\n\nFrom the line charts below, we can see that monthly expenditure among residents tended to be fairly stable across months, regardless of their education levels. Even in the month of March, where earnings tended to spike, expenditure remained fairly low. Notably, instead of spending more, residents with higher wage tended to save more monthly (portion highlighted in yellow).\n\n\n\n\n\n\nNote\n\n\n\nThis suggests that residents, regardless of income, are generally frugal with their money and spend within their means. A good sign in terms of financial health!\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n# Create a ggplot object with the data\np <-ggplot(data = Earn_Exp_avg, aes(x = Month)) +\n  geom_line(aes(y = Avg_Earning, color = \"Avg_Earning\")) +\n  geom_line(aes(y = Avg_Expenditure, color = \"Avg_Expenditure\")) +\n  geom_ribbon(aes(ymin = Avg_Expenditure, ymax = Avg_Earning), fill = \"yellow\", alpha = 0.3) +\n  scale_color_manual(name = NULL, values = c(\"Avg_Earning\" = \"steelblue\", \"Avg_Expenditure\" = \"orange\"), \n                     labels = c(\"Average Earnings\", \"Average Expenditure\")) +\n  labs(title = \"Average Earnings and Expenditure per Month\",\n       x = \"Month\",\n       y = \"Amount\") +\n  theme_classic() +\n  facet_wrap(~ Education_Level, ncol = 1, scales = \"free_y\") +\n  ylim(0, 10000) +\n  scale_x_date(date_labels = \"%b %Y\", date_breaks = \"1 month\") +\n  theme(legend.position = \"bottom\",\n        plot.title = element_text(size = 12, face = \"bold\", hjust = 0.5),\n        axis.title = element_text(size = 10),\n        axis.text = element_text(size = 6))\n\n# Convert the ggplot object to an interactive plotly object and modify the hoverinfo argument\np <- ggplotly(p, height = 500, tooltip = c(\"Avg_Earning\", \"Avg_Expenditure\")) %>%\n  layout(hoverlabel = list(bgcolor = \"white\"))\n\n# Set the legend position to \"bottom\"\np <- layout(p, legend = list(orientation = \"h\", x = 0.25, y = -0.1))\n\n# Display the plot\np\n\n\n\n\n\n\n\nTo better understand spending patterns, using rowMeans(), new variables were calculated to derive the average monthly spending on each category i.e., education, food, recreational, shelter.\n\n\nCode\n# Create New variable for total average education expenditure\nfinal_data$Education <- rowMeans(final_data[c(\"Education_2022-03\", \"Education_2022-04\", \"Education_2022-05\",\"Education_2022-06\", \"Education_2022-07\", \"Education_2022-08\",\"Education_2022-09\", \"Education_2022-10\", \"Education_2022-11\",\"Education_2022-12\", \"Education_2023-01\", \"Education_2023-02\")])\n\n# Create New variable for total average food expenditure\nfinal_data$Food<- rowMeans(final_data[c(\"Food_2022-03\", \"Food_2022-04\", \"Food_2022-05\",\"Food_2022-06\", \"Food_2022-07\", \"Food_2022-08\",\"Food_2022-09\", \"Food_2022-10\", \"Food_2022-11\",\"Food_2022-12\", \"Food_2023-01\", \"Food_2023-02\")])\n\n# Create New variable for total average recreation expenditure\nfinal_data$Recreation<- rowMeans(final_data[c(\"Recreation_2022-03\", \"Recreation_2022-04\", \"Recreation_2022-05\",\"Recreation_2022-06\", \"Recreation_2022-07\", \"Recreation_2022-08\",\"Recreation_2022-09\", \"Recreation_2022-10\", \"Recreation_2022-11\",\"Recreation_2022-12\", \"Recreation_2023-01\", \"Recreation_2023-02\")])\n\n# Create New variable for total average shelter expenditure\nfinal_data$Shelter<- rowMeans(final_data[c(\"Shelter_2022-03\", \"Shelter_2022-04\", \"Shelter_2022-05\",\"Shelter_2022-06\", \"Shelter_2022-07\", \"Shelter_2022-08\",\"Shelter_2022-09\", \"Shelter_2022-10\", \"Shelter_2022-11\",\"Shelter_2022-12\", \"Shelter_2023-01\", \"Shelter_2023-02\")])\n\n# Round the result to 2 decimal places\nfinal_data$Education <- round(final_data$Education, 2)\nfinal_data$Food <- round(final_data$Food, 2)\nfinal_data$Recreation <- round(final_data$Recreation, 2)\nfinal_data$Shelter <- round(final_data$Shelter, 2)\n\n# Calculate the mean spending for each category\nmean_spending <- c(mean(final_data$Education), mean(final_data$Food), \n                   mean(final_data$Recreation), mean(final_data$Shelter))\n\n# Create a data frame with the mean spending for each category\nspending_summary <- data.frame(Category = c(\"Education\", \"Food\", \"Recreation\", \"Shelter\"),\n                               Mean_Spending = mean_spending)\n\n\nFrom the bar chart below, we see that a approximately half of total monthly expenditure was spent on shelter. This was followed by recreational activities, then food and lastly education.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n# Create a bar chart of the mean spending for each category\nspending_summary %>%\n  mutate(Category = reorder(Category, -Mean_Spending)) %>%\n  ggplot(aes(x = Category, y = Mean_Spending)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  geom_text(aes(label = paste0(\"$\", round(Mean_Spending, 2))), vjust = -0.5) +\n  ggtitle(\"Average Monthly Spending by Category\") +\n  xlab(\"Category\") +\n  ylab(\"Average Monthly Spending\") +\n  theme_classic() +  \n  theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.5),\n        axis.title = element_text(size = 10),\n        axis.text = element_text(size = 10))\n\n\n\n\n\n\n\n\n\n\nIt is reasonable to link financial health to happiness. As such, let’s explore the hypothesis that both variables are positively correlated with one another i.e., the wealthier/more savings one has, the happier one is. The scatter plot below however, suggests otherwise.In fact, on the top left corner of the scatter plot, we can see that examples of residents with very high savings indicating low joviality scores.\n\n\n\n\n\n\nNote\n\n\n\nContrary to our hypothesis, monthly savings was found to be negatively correlated with joviality. This may be due to external stressors that come with a higher paying jobs. It may be useful for the local council to reach out to high earners in the city, to better support their well-being.\n\n\n\nPlotCodeStatistical TestCode\n\n\n\n\n\n\n\n\n\n\n\n# Create New variable for Savings\nfinal_data$Avg_Savings <- rowMeans(final_data[, c(\"TotSav_Mar\", \"TotSav_Apr\", \"TotSav_May\",\"TotSav_Jun\", \"TotSav_Jul\", \"TotSav_Aug\",\"TotSav_Sep\", \"TotSav_Oct\", \"TotSav_Nov\",\"TotSav_Dec\", \"TotSav_Jan\", \"TotSav_Feb\")])\n\n# Round the result to 2 decimal places\nfinal_data$Avg_Savings <- round(final_data$Avg_Savings, 2)\n\nplot_ly(data = final_data, \n        x = ~joviality, \n        y = ~Avg_Savings,\n        color = ~educationLevel,\n        type = \"scatter\",\n        mode   = 'markers') %>%\n  add_trace(\n    text = ~paste(\"Joviality: \", joviality, \"<br>\",\n                  \"Avg Savings: $\", Avg_Savings),\n    hoverinfo = \"text\",\n    showlegend = FALSE\n  ) %>%\n  layout(\n    title = \"Correlation between Joviality and Savings by Education\",\n    xaxis = list(title = \"Joviality Score\"),\n    yaxis = list(title = \"Average Savings\"),\n    margin = list(l = 60, r = 10, t = 60, b = 30),\n    plot_bgcolor = \"white\",\n    paper_bgcolor = \"white\",\n    font = list(color = \"black\"),\n    hoverlabel = list(bgcolor = \"white\", font = list(color = \"black\")),\n    legend = list(title = \"Education Level\", font = list(color = \"black\"))\n  )\n\n\n\n\n\n\n\n\n\n\n\nggscatterstats(\n  data = final_data,\n  x = joviality,\n  y = Avg_Savings,\n  marginal = FALSE,\n  ) + \nggtitle(\"Correlation betwen Joviality and Savings\") +\nlabs(x = \"Joviality Score\", y = \"Average Savings\")\n\n\n\n\n\n\n\nAside from financial stability, another possible driver for happiness could be having meaningful engagements outside of work. As such, using expenditure on recreation activities as a proxy, we explore if those who spend more on recreational activities tended to register higher joviality scores.\n\nPlotData\n\n\n\n\n\n\n\n\n\n\nggscatterstats(\n  data = final_data,\n  x = joviality,\n  y = Recreation,\n  marginal = FALSE,\n  ) + \nggtitle(\"Correlation betwen Joviality and Recreation\") +\nlabs(x = \"Joviality Score\", y = \"Recreation Expenditure\")\n\n\n\n\nBreaking down this relationship further by interest groups, we also observe that this positive correlation is true, across all groups.\nAdditional analyses of interest groups by size i.e., number of interested residents, and joviality scores recorded no significant differences.\n\n\n\n\n\n\nNote\n\n\n\nThis finding suggests that taking part and being active in interest group cans lead to a more happier, more fulfilling lives. It is therefore important that the local council look into this aspect e.g, understand the preferences of residents, current infrastructure gaps etc, to better allocate resources and encourage greater participation.\n\n\n\nPlotData\n\n\n\n\n\n\n\n\n\n\nggscatterstats(\n  data = final_data,\n  x = joviality,\n  y = Recreation,\n  marginal = FALSE,\n  ) + \n  ggtitle(\"Correlation between Joviality and Recreation Expenditure by Interest Groups\") +\n  labs(x = \"Joviality Score\", y = \"Recreation Expenditure\") +\n  facet_wrap(~interestGroup)\n\n\n\n\n\n\n\nLastly, we look at the relationship between age and joviality. Looking at the scatter plot below, there appeared to be a slight negative correlation between age and joviality.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggscatterstats(\n  data = final_data,\n  x = age,\n  y = joviality,\n  marginal = FALSE,\n  )\n\n\n\n\nLooking closer at the distribution of joviality scores by 10 year age bands, we also see a larger hump on among residents in their 50s, indicating a score of 0.4 and below. This slope then tapers downards as joviality scores increase.\n\n\n\n\n\n\nNote\n\n\n\nAs older residents were once important contributors to the community, the data suggests that more can be done to understand why older residents are noting lower joviality scores. Taking care of the older residents would also put younger residents at ease, knowing that their parents are well taken care off, and they would be too in the future.\n\n\n\nDistributionCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is generally a good spread of residents across all ages in the City of Engagement. Families however, tended to be relatively small; no more than 3, with about 1 in 3 household indicating that they have children at home.\nEducation was also largely divided down the middle, with about half of residents holding a bachelors degree and above. Notably, younger respondents were not more likely to be more educated than older residents in the city. As higher education was found to be highly correlated with income, there may be value for the city council to look into nudging younger residents to further their education, to improve their quality of live in the longer term.\nWhen comparing earnings to expenditure, it is noted that the large majority, even those who earned less, tended to spend within their means, indicating good financial health among residents.\nWhile higher income allowed wealthier residents to set aside more savings, the financial stability and freedom did not necessarily lead to to higher joviality scores. On the contrary, residents who registered higher expenditure on recreational activities recorded being happier. It may therefore be useful for the council to strategise allocation of resources to these activities, and nudge greater participation among residents.\nLastly, it was noted that joviality scores tended to slightly decline with age. It may therefore be useful for the local council to reach out to older residents to understand their concerns, in order to better support their golden years!"
  },
  {
    "objectID": "Take-Home_Exercises/Take-Home_Ex01/take-home_Ex01_old.html",
    "href": "Take-Home_Exercises/Take-Home_Ex01/take-home_Ex01_old.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "City of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received.\n\n\n\nIn this take-home exercise, you are required to apply the concepts and methods you had learned in Lesson 1-4 to reveal the demographic and financial characteristics of the city of Engagement, using appropriate static and interactive statistical graphics methods.\n\n\n\nFor the purpose of this study, two data sets are provided. They are:\n\nParticipants.csv: Contains information about the residents of City of Engagement that have agreed to participate in this study.\nFinancialJournal.csv: Contains information about financial transactions.\n\n\n\n\nFirst, the necessary packages and datasets are loaded.\n\npacman::p_load(tidyverse, ggrepel, patchwork, \n               ggthemes,hrbrthemes,ggiraph, plotly, \n               patchwork, DT, readxl, gifski, gapminder,\n               gganimate, crosstalk, ggstatsplot, dplyr, lubridate)\n\n\nparticipants <- read_csv(\"data/Participants.csv\", show_col_types = FALSE)\nfinance <- read_csv(\"data/FinancialJournal.csv\", show_col_types = FALSE)\n\n\n\n\nBefore jumping into visualising the data. We first take a deep dive to understand the data structure and clean the data, where necessary, in preparation for visualisation.\n\n\nAs newer versions of readr don’t report the full column specification when data files are loaded. We will use the spec() function to better understand the full column specification:\n\nspec(participants)\n\ncols(\n  participantId = col_double(),\n  householdSize = col_double(),\n  haveKids = col_logical(),\n  age = col_double(),\n  educationLevel = col_character(),\n  interestGroup = col_character(),\n  joviality = col_double()\n)\n\n\nResults from running the spec() function highlighted that multiple columns are not set to the most appropriate data type. For example, participantID should be viewed as a categorical variable, as opposed to a continuous numeric variable. We will use the mutate function to update the data types.\n\nparticipants <- participants %>% mutate_at(c('participantId', 'interestGroup', 'educationLevel'), as.factor)\n\nWe also check the dataset for duplicated participants. Note that we have 1,011 participants in our dataset, instead of 1,000. No duplicates were found.\n\nparticipants %>% distinct(participantId, .keep_all= TRUE)\n\n# A tibble: 1,011 × 7\n   participantId householdSize haveKids   age educationLevel      interestGroup\n   <fct>                 <dbl> <lgl>    <dbl> <fct>               <fct>        \n 1 0                         3 TRUE        36 HighSchoolOrCollege H            \n 2 1                         3 TRUE        25 HighSchoolOrCollege B            \n 3 2                         3 TRUE        35 HighSchoolOrCollege A            \n 4 3                         3 TRUE        21 HighSchoolOrCollege I            \n 5 4                         3 TRUE        43 Bachelors           H            \n 6 5                         3 TRUE        32 HighSchoolOrCollege D            \n 7 6                         3 TRUE        26 HighSchoolOrCollege I            \n 8 7                         3 TRUE        27 Bachelors           A            \n 9 8                         3 TRUE        20 Bachelors           G            \n10 9                         3 TRUE        35 Bachelors           D            \n# ℹ 1,001 more rows\n# ℹ 1 more variable: joviality <dbl>\n\n\n\n\n\nSimilar to the Participants dataset, data cleaning is performed on the finance data to check for appropriate data types and duplicates.\n\nspec(finance)\n\ncols(\n  participantId = col_double(),\n  timestamp = col_datetime(format = \"\"),\n  category = col_character(),\n  amount = col_double()\n)\n\nfinance <-finance %>% mutate_at(c('participantId', 'category'), as.factor)\n\nUnlike the participants data, 1,113 duplicated rows were found in the Finance dataset. These rows will be removed from subsequent analyses.\n\nfinance_new <- finance %>% distinct()\nfinance_new\n\n# A tibble: 1,512,523 × 4\n   participantId timestamp           category  amount\n   <fct>         <dttm>              <fct>      <dbl>\n 1 0             2022-03-01 00:00:00 Wage      2473. \n 2 0             2022-03-01 00:00:00 Shelter   -555. \n 3 0             2022-03-01 00:00:00 Education  -38.0\n 4 1             2022-03-01 00:00:00 Wage      2047. \n 5 1             2022-03-01 00:00:00 Shelter   -555. \n 6 1             2022-03-01 00:00:00 Education  -38.0\n 7 2             2022-03-01 00:00:00 Wage      2437. \n 8 2             2022-03-01 00:00:00 Shelter   -557. \n 9 2             2022-03-01 00:00:00 Education  -12.8\n10 3             2022-03-01 00:00:00 Wage      2367. \n# ℹ 1,512,513 more rows\n\nfinance\n\n# A tibble: 1,513,636 × 4\n   participantId timestamp           category  amount\n   <fct>         <dttm>              <fct>      <dbl>\n 1 0             2022-03-01 00:00:00 Wage      2473. \n 2 0             2022-03-01 00:00:00 Shelter   -555. \n 3 0             2022-03-01 00:00:00 Education  -38.0\n 4 1             2022-03-01 00:00:00 Wage      2047. \n 5 1             2022-03-01 00:00:00 Shelter   -555. \n 6 1             2022-03-01 00:00:00 Education  -38.0\n 7 2             2022-03-01 00:00:00 Wage      2437. \n 8 2             2022-03-01 00:00:00 Shelter   -557. \n 9 2             2022-03-01 00:00:00 Education  -12.8\n10 3             2022-03-01 00:00:00 Wage      2367. \n# ℹ 1,513,626 more rows\n\n\nIn order to look at spending patterns, it maybe useful to look at these trends on a yearly or monhtly basis. As such, new variables were created to extract year and month data from the timestamp.\n\nfinance$timestamp <- as.Date(finance$timestamp, format = \"%Y-%m-%d\")\n\nfinance$Month <- format(as.Date(finance$timestamp), \"%m\")\nfinance$Year <- format(as.Date(finance$timestamp), \"%Y\")\nfinance$Month_Yr <- format(as.Date(finance$timestamp), \"%Y-%m\")\n\nfinance\n\n# A tibble: 1,513,636 × 7\n   participantId timestamp  category  amount Month Year  Month_Yr\n   <fct>         <date>     <fct>      <dbl> <chr> <chr> <chr>   \n 1 0             2022-03-01 Wage      2473.  03    2022  2022-03 \n 2 0             2022-03-01 Shelter   -555.  03    2022  2022-03 \n 3 0             2022-03-01 Education  -38.0 03    2022  2022-03 \n 4 1             2022-03-01 Wage      2047.  03    2022  2022-03 \n 5 1             2022-03-01 Shelter   -555.  03    2022  2022-03 \n 6 1             2022-03-01 Education  -38.0 03    2022  2022-03 \n 7 2             2022-03-01 Wage      2437.  03    2022  2022-03 \n 8 2             2022-03-01 Shelter   -557.  03    2022  2022-03 \n 9 2             2022-03-01 Education  -12.8 03    2022  2022-03 \n10 3             2022-03-01 Wage      2367.  03    2022  2022-03 \n# ℹ 1,513,626 more rows"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html",
    "title": "In-Class Exercise 4",
    "section": "",
    "text": "pacman::p_load(rstatix, gt, patchwork, tidyverse)\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#visualising-normal-distribution",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#visualising-normal-distribution",
    "title": "In-Class Exercise 4",
    "section": "2 Visualising Normal Distribution",
    "text": "2 Visualising Normal Distribution\n\nThe plotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam_data,\n       aes(sample=ENGLISH)) + #aes not taking value of x,y\n  stat_qq() + #calculate if sample is normal \n  stat_qq_line() #plot the theoretical line\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can see that the points deviate significantly from the straight diagonal line. This is a clear indication that the set of data is not normally distributed."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#combining-statistical-graph",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#combining-statistical-graph",
    "title": "In-Class Exercise 4",
    "section": "Combining Statistical Graph",
    "text": "Combining Statistical Graph\n\nThe plotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nqq <- ggplot(exam_data,\n       aes(sample=ENGLISH)) +\n  stat_qq() +\n  stat_qq_line() \n\nsw_t <- exam_data %>%\n  shapiro_test(ENGLISH) %>%\n  gt()\n\ntmp <- tempfile(fileext = '.png')\ngtsave(sw_t, tmp) #save sw_t into temp folder\ntable_png <- png::readPNG(tmp,\n                          native = TRUE)\n\nqq + table_png"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-class_Ex01.html",
    "href": "In-Class_Ex/In-Class_Ex01/In-class_Ex01.html",
    "title": "In-Class_Ex01",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package.\n\npacman::p_load(tidyverse)\n\nNext, we import the data.\n\nexam_data <- read.csv(\"data/Exam_data.csv\")\n\n\n\nHorizontal bar chart of students by race\n\nggplot(data=exam_data, \n  aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  ggtitle(\"Students by Race\") +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"lightblue\",\n                                colour = \"lightblue\",\n                                linewidth = 0.5, linetype = \"solid\"),\n    panel.grid.major = element_line(linewidth = 0.5, linetype = 'solid',\n                                colour = \"white\"), \n    panel.grid.minor = element_line(linewidth = 0.25, linetype = 'solid',\n                                colour = \"white\")\n  )"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-class_Ex01.html#designing-data-driven-graphics-for-analysis-i",
    "href": "In-Class_Ex/In-Class_Ex01/In-class_Ex01.html#designing-data-driven-graphics-for-analysis-i",
    "title": "In-Class_Ex01",
    "section": "2. Designing Data-driven graphics for Analysis I",
    "text": "2. Designing Data-driven graphics for Analysis I\nThe Original Design\nA simple vertical bar chart for frequency analysis.\n\nggplot(data=exam_data, \n  aes(x=RACE)) +\n  geom_bar() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\ny axis lavel is not clear (i.e. count)\nTo support effective comparison, the bars should be sorted by their respective frequencies\nFor statis graph, frequency values should be added to provided additional information\n\n\n\nWith reference to the critics on the earlier slide, a makeover was conducted.\n\nggplot(data=exam_data, \n  aes(x=fct_infreq(RACE))) +\n  geom_bar() +\n  theme_minimal() +\n  ylim(0,220) +\n  labs(y= \"Number of Pupils\", x = \"Race\") +\n  geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-1)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-class_Ex01.html#designing-data-driven-graphics-for-analysis-ii",
    "href": "In-Class_Ex/In-Class_Ex01/In-class_Ex01.html#designing-data-driven-graphics-for-analysis-ii",
    "title": "In-Class_Ex01",
    "section": "3. Designing Data-driven graphics for Analysis II",
    "text": "3. Designing Data-driven graphics for Analysis II\nThe Original Design\nA basic histogram with little additional information on the data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe following was done to improve the chart: - Adding mean and median lines on the histogram plot - Change fill colour and line colour\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(colour = 'darkgrey', fill = 'lightblue',bins = 20) +\n  labs(y= \"Number of Pupils\", x = \"Maths Score\") +\n  geom_vline(aes(xintercept = mean(MATHS, na.rm = T)), \n             col = 'red', \n             linetype = 'longdash', \n             linewidth = 1) + \n  geom_vline(aes(xintercept=median(MATHS, na.rm=T)),\n             col=\"green\",\n             linetype=\"dashed\", \n             linewidth=1)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-class_Ex01.html#designing-data-driven-graphics-for-analysis-iii",
    "href": "In-Class_Ex/In-Class_Ex01/In-class_Ex01.html#designing-data-driven-graphics-for-analysis-iii",
    "title": "In-Class_Ex01",
    "section": "4. Designing Data-driven graphics for Analysis III",
    "text": "4. Designing Data-driven graphics for Analysis III\nThe original Design\nThe histograms below are elegantly designed, but not informative. More context, such as comparing the scores by gender with all pupuls may provided an added, meaningful perspective.\n\nggplot(data=exam_data, \n       aes(x= ENGLISH)) +\n  geom_histogram() +\n    facet_wrap(~ GENDER)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nAfter some refining.\n\nd <- exam_data   \nd_bg <- d[, -3]  \n\nggplot(d, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ GENDER) +\n  guides(fill = FALSE) +  \n  theme_bw()\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-class_Ex01.html#designing-data-driven-graphics-for-analysis-vi",
    "href": "In-Class_Ex/In-Class_Ex01/In-class_Ex01.html#designing-data-driven-graphics-for-analysis-vi",
    "title": "In-Class_Ex01",
    "section": "5. Designing Data-driven graphics for Analysis VI",
    "text": "5. Designing Data-driven graphics for Analysis VI\nThe original Design\nA simple scatter plot\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe following was done to improve the chart: - Y axis edited so it is aligned with the x axis - Added dotted guiding lines at the 50 mark point for both axis\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  xlim(0,100) +\n  ylim(0,100) +\n  geom_point() +\n  geom_hline(yintercept=50, colour = 'grey', linetype = 'longdash') + \n  geom_vline(xintercept=50, colour = 'grey', linetype = 'longdash')"
  },
  {
    "objectID": "VAST_Challenge/MC1.html",
    "href": "VAST_Challenge/MC1.html",
    "title": "MC 1",
    "section": "",
    "text": "1 Load the R packages\n\n\nShow the Code\npacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, tidyverse)\n\n\n2 Import data\n\n\nShow the Code\nMC1 <- jsonlite::fromJSON(\"/Users/jiahuiloh/lohjiahui/ISSS608-VAA/VAST_Challenge/MC1/data/MC1.json\")\n\n\n2.1 Extract dataframes and convert to tibble dataframe\n\n\nShow the Code\nMC1_nodes <- as_tibble(MC1$nodes) %>%\n  select(id,type,country) #select fields we want and reorganize the fields moving id forward\n\n\n\n\nShow the Code\nMC1_edges <- as_tibble(MC1$links) %>%\n  select(source, target, type, weight, key)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to model, analyse and visualise network data using R. By the end of this hands-on exercise, we will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph\nbuild network graph visualisation using appropriate functions of ggraph\ncompute network geometrics using tidygraph\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package.\n\n\n\n\n\n\n\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\n\n\nCode\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\n\n\n\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\nGAStech-email_edges.csv: The edges data which consists of two weeks of 9063 emails correspondances between 55 employees\nGAStech_email_nodes.csv: The nodes data which consist of the names, department and title of the 55 employees.\nBoth datasets will be imported into RStudio environment using read_csv() of readr package.\n\n\nCode\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\")\n\n\nRows: 54 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): label, Department, Title\ndbl (1): id\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\nRows: 9063 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): SentDate, Subject, MainSubject, sourceLabel, targetLabel\ndbl  (2): source, target\ntime (1): SentTime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\n\nCode\nglimpse(GAStech_nodes)\n\n\nRows: 54\nColumns: 4\n$ id         <dbl> 1, 2, 3, 4, 5, 6, 7, 44, 45, 46, 8, 9, 10, 11, 12, 13, 14, …\n$ label      <chr> \"Mat.Bramar\", \"Anda.Ribera\", \"Rachel.Pantanal\", \"Linda.Lago…\n$ Department <chr> \"Administration\", \"Administration\", \"Administration\", \"Admi…\n$ Title      <chr> \"Assistant to CEO\", \"Assistant to CFO\", \"Assistant to CIO\",…\n\n\n\n\nCode\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date”” data type.\n\n\n\n\n\n\n\nLet’s correct the data type for date.\n\n\nCode\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the data spelling in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale.\n\n\n\nA quick review of the data using glimspe() shows the data structure of the reformatted GAStech_edges data frame.\n\n\nCode\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 10\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    <date> 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     <ord> Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\n\nCode\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'source', 'target'. You can override using\nthe `.groups` argument.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated.\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame.\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday <ord> Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  <int> 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…\n\n\n\n\n\n\nIn this section, you will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\nBefore getting started, you are advised to read these two articles:\n\n-   [Introducing tidygraph](https://www.data-imaginist.com/2017/introducing-tidygraph/)\n-   [tidygraph 1.1 - A tidy hope](https://www.data-imaginist.com/2018/tidygraph-1-1-a-tidy-hope/)\n\n\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graphnetwork. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\n\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself.\n\n\n\n\nIn this section, you will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph()\n\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\n\n\nCode\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 54 × 4\n     id label               Department     Title                                \n  <dbl> <chr>               <chr>          <chr>                                \n1     1 Mat.Bramar          Administration Assistant to CEO                     \n2     2 Anda.Ribera         Administration Assistant to CFO                     \n3     3 Rachel.Pantanal     Administration Assistant to CIO                     \n4     4 Linda.Lagos         Administration Assistant to COO                     \n5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Manag…\n6     6 Carla.Forluniau     Administration Assistant to IT Group Manager        \n# ℹ 48 more rows\n#\n# A tibble: 1,372 × 4\n   from    to Weekday Weight\n  <int> <int> <ord>    <int>\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n\n\n\n\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\n\n\nCode\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 1,372 × 4\n   from    to Weekday  Weight\n  <int> <int> <ord>     <int>\n1    40    41 Saturday     13\n2    41    43 Monday       11\n3    35    31 Tuesday      10\n4    40    41 Monday       10\n5    40    43 Monday       10\n6    36    32 Sunday        9\n# ℹ 1,366 more rows\n#\n# A tibble: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\nVisit the reference guide of activate() to find out more about the function.\n\n\n\n\nggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nAs in all network graph, there are three main aspects to a ggraph’s network graph, they are:\n\nnodes,\nedges and\nlayouts.\n\n\n\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\n\nCode\nggraph(GAStech_graph) +\n  geom_edge_link(edgewidth = 0.1, edge_alpha = 0.5) +\n  geom_node_point()\n\n\nUsing \"stress\" as default layout\n\n\nWarning in geom_edge_link(edgewidth = 0.1, edge_alpha = 0.5): Ignoring unknown\nparameters: `edgewidth`\n\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\n\n\n\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\n\nCode\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\n\nUsing \"stress\" as default layout\n\n\nCode\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\n\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\n\nCode\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\n\nUsing \"stress\" as default layout\n\n\nCode\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n\n\n\n\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\n\nCode\ng <- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThing to learn from the code chunk above: - layout argument is used to define the layout to be used.\n\n\n\n\n\nIn this section, you will colour each node by referring to their respective departments.\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.\n\n\n\n\n\n\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.\n\n\n\n\n\n\nAnother very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaningful way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in a panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\n\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\nThe code chunk below uses theme() to change the position of the legend.\n\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\nThe code chunk below adds frame to each graph.\n\nset_graph_style() \n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\nIn the code chunkc below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\n\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\ng <- GAStech_graph %>%\n  mutate(betweenness_centrality = centrality_betweenness()) %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\n\n\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\ng <- GAStech_graph %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\n\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\ng <- GAStech_graph %>%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `community = as.factor(group_edge_betweenness(weights = Weight,\n  directed = TRUE))`.\nCaused by warning in `cluster_edge_betweenness()`:\n! At core/community/edge_betweenness.c:493 : Membership vector will be selected based on the highest modularity score.\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nvisNetwork() is a R package for network visualization, using vis.jsjavascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\nThe resulting graph is fun to play around with.\n\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.\nYou can also zoom in and out on the plot and move it around to re-center it.\n\n\n\n\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated <- GAStech_edges %>%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %>%\n  rename(from = id) %>% \n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %>%\n  rename(to = id) %>% \n  filter(MainSubject == \"Work related\") %>%\n  group_by(from, to) %>%\n    summarise(weight = n()) %>%\n  filter(from!=to) %>%\n  filter(weight > 1) %>%\n  ungroup()\n\n`summarise()` has grouped output by 'from'. You can override using the\n`.groups` argument.\n\n\n\n\n\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n\n\n\n\n\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\nVisit Igraph to find out more about visIgraphLayout’s argument.\n\n\n\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes <- GAStech_nodes %>%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\nIn the code run below visEdges() is used to symbolise the edges. - The argument arrows is used to define where to place the arrow. - The smooth argument is used to plot the edges using a smooth curve.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation. - The argument highlightNearest highlights nearest when clicking a node. - The argument nodesIdSelection adds an id node selection creating an HTML select element.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nVisit Option to find out more about visOption's argument."
  }
]